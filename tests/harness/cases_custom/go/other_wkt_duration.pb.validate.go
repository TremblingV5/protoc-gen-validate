// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_wkt_duration.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_wkt_duration_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DurationNone with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationNone) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DurationNoneValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DurationNoneValidationError is the validation error returned by
// DurationNone.Validate if the designated constraints aren't met.
type DurationNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationNoneValidationError) ErrorName() string { return "DurationNoneValidationError" }

// Error satisfies the builtin error interface
func (e DurationNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationNoneValidationError{}

// Validate checks the field values on DurationRequired with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DurationRequired) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() == nil {
		return DurationRequiredValidationError{
			field:  "Val",
			reason: "value is required",
		}
	}

	return nil
}

// DurationRequiredValidationError is the validation error returned by
// DurationRequired.Validate if the designated constraints aren't met.
type DurationRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationRequiredValidationError) ErrorName() string { return "DurationRequiredValidationError" }

// Error satisfies the builtin error interface
func (e DurationRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationRequiredValidationError{}

// Validate checks the field values on DurationConst with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationConst) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationConstValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		if dur != time.Duration(3*time.Second+0*time.Nanosecond) {
			return DurationConstValidationError{
				field:  "Val",
				reason: "value must equal 3s",
			}
		}

	}

	return nil
}

// DurationConstValidationError is the validation error returned by
// DurationConst.Validate if the designated constraints aren't met.
type DurationConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationConstValidationError) ErrorName() string { return "DurationConstValidationError" }

// Error satisfies the builtin error interface
func (e DurationConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationConstValidationError{}

// Validate checks the field values on DurationIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DurationIn) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationInValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		if _, ok := _DurationIn_Val_InLookup[dur]; !ok {
			return DurationInValidationError{
				field:  "Val",
				reason: "value must be in list [seconds:1 nanos:1000]",
			}
		}

	}

	return nil
}

// DurationInValidationError is the validation error returned by
// DurationIn.Validate if the designated constraints aren't met.
type DurationInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationInValidationError) ErrorName() string { return "DurationInValidationError" }

// Error satisfies the builtin error interface
func (e DurationInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationInValidationError{}

var _DurationIn_Val_InLookup = map[time.Duration]struct{}{
	1000000000: {},
	1000:       {},
}

// Validate checks the field values on DurationNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationNotInValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		if _, ok := _DurationNotIn_Val_NotInLookup[dur]; ok {
			return DurationNotInValidationError{
				field:  "Val",
				reason: "value must not be in list []",
			}
		}

	}

	return nil
}

// DurationNotInValidationError is the validation error returned by
// DurationNotIn.Validate if the designated constraints aren't met.
type DurationNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationNotInValidationError) ErrorName() string { return "DurationNotInValidationError" }

// Error satisfies the builtin error interface
func (e DurationNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationNotInValidationError{}

var _DurationNotIn_Val_NotInLookup = map[time.Duration]struct{}{
	0: {},
}

// Validate checks the field values on DurationLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DurationLT) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationLTValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return DurationLTValidationError{
				field:  "Val",
				reason: "value must be less than 0s",
			}
		}

	}

	return nil
}

// DurationLTValidationError is the validation error returned by
// DurationLT.Validate if the designated constraints aren't met.
type DurationLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationLTValidationError) ErrorName() string { return "DurationLTValidationError" }

// Error satisfies the builtin error interface
func (e DurationLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationLTValidationError{}

// Validate checks the field values on DurationLTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationLTE) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationLTEValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(1*time.Second + 0*time.Nanosecond)

		if dur > lte {
			return DurationLTEValidationError{
				field:  "Val",
				reason: "value must be less than or equal to 1s",
			}
		}

	}

	return nil
}

// DurationLTEValidationError is the validation error returned by
// DurationLTE.Validate if the designated constraints aren't met.
type DurationLTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationLTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationLTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationLTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationLTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationLTEValidationError) ErrorName() string { return "DurationLTEValidationError" }

// Error satisfies the builtin error interface
func (e DurationLTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationLTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationLTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationLTEValidationError{}

// Validate checks the field values on DurationGT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DurationGT) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationGTValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gt := time.Duration(0*time.Second + 1000*time.Nanosecond)

		if dur <= gt {
			return DurationGTValidationError{
				field:  "Val",
				reason: "value must be greater than 1µs",
			}
		}

	}

	return nil
}

// DurationGTValidationError is the validation error returned by
// DurationGT.Validate if the designated constraints aren't met.
type DurationGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationGTValidationError) ErrorName() string { return "DurationGTValidationError" }

// Error satisfies the builtin error interface
func (e DurationGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationGTValidationError{}

// Validate checks the field values on DurationGTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationGTE) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationGTEValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		gte := time.Duration(0*time.Second + 1000000*time.Nanosecond)

		if dur < gte {
			return DurationGTEValidationError{
				field:  "Val",
				reason: "value must be greater than or equal to 1ms",
			}
		}

	}

	return nil
}

// DurationGTEValidationError is the validation error returned by
// DurationGTE.Validate if the designated constraints aren't met.
type DurationGTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationGTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationGTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationGTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationGTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationGTEValidationError) ErrorName() string { return "DurationGTEValidationError" }

// Error satisfies the builtin error interface
func (e DurationGTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationGTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationGTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationGTEValidationError{}

// Validate checks the field values on DurationGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationGTLT) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationGTLTValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lt := time.Duration(1*time.Second + 0*time.Nanosecond)
		gt := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur <= gt || dur >= lt {
			return DurationGTLTValidationError{
				field:  "Val",
				reason: "value must be inside range (0s, 1s)",
			}
		}

	}

	return nil
}

// DurationGTLTValidationError is the validation error returned by
// DurationGTLT.Validate if the designated constraints aren't met.
type DurationGTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationGTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationGTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationGTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationGTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationGTLTValidationError) ErrorName() string { return "DurationGTLTValidationError" }

// Error satisfies the builtin error interface
func (e DurationGTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationGTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationGTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationGTLTValidationError{}

// Validate checks the field values on DurationExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationExLTGTValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lt := time.Duration(0*time.Second + 0*time.Nanosecond)
		gt := time.Duration(1*time.Second + 0*time.Nanosecond)

		if dur >= lt && dur <= gt {
			return DurationExLTGTValidationError{
				field:  "Val",
				reason: "value must be outside range [0s, 1s]",
			}
		}

	}

	return nil
}

// DurationExLTGTValidationError is the validation error returned by
// DurationExLTGT.Validate if the designated constraints aren't met.
type DurationExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationExLTGTValidationError) ErrorName() string { return "DurationExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e DurationExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationExLTGTValidationError{}

// Validate checks the field values on DurationGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DurationGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationGTELTEValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(3600*time.Second + 0*time.Nanosecond)
		gte := time.Duration(60*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return DurationGTELTEValidationError{
				field:  "Val",
				reason: "value must be inside range [1m0s, 1h0m0s]",
			}
		}

	}

	return nil
}

// DurationGTELTEValidationError is the validation error returned by
// DurationGTELTE.Validate if the designated constraints aren't met.
type DurationGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationGTELTEValidationError) ErrorName() string { return "DurationGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e DurationGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationGTELTEValidationError{}

// Validate checks the field values on DurationExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DurationExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationExGTELTEValidationError{
				field:  "Val",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(60*time.Second + 0*time.Nanosecond)
		gte := time.Duration(3600*time.Second + 0*time.Nanosecond)

		if dur > lte && dur < gte {
			return DurationExGTELTEValidationError{
				field:  "Val",
				reason: "value must be outside range (1m0s, 1h0m0s)",
			}
		}

	}

	return nil
}

// DurationExGTELTEValidationError is the validation error returned by
// DurationExGTELTE.Validate if the designated constraints aren't met.
type DurationExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationExGTELTEValidationError) ErrorName() string { return "DurationExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e DurationExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationExGTELTEValidationError{}

// Validate checks the field values on DurationFieldWithOtherFields with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DurationFieldWithOtherFields) Validate() error {
	if m == nil {
		return nil
	}

	if d := m.GetDurationVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return DurationFieldWithOtherFieldsValidationError{
				field:  "DurationVal",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(1*time.Second + 0*time.Nanosecond)

		if dur > lte {
			return DurationFieldWithOtherFieldsValidationError{
				field:  "DurationVal",
				reason: "value must be less than or equal to 1s",
			}
		}

	}

	if m.GetIntVal() <= 16 {
		return DurationFieldWithOtherFieldsValidationError{
			field:  "IntVal",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// DurationFieldWithOtherFieldsValidationError is the validation error returned
// by DurationFieldWithOtherFields.Validate if the designated constraints
// aren't met.
type DurationFieldWithOtherFieldsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationFieldWithOtherFieldsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationFieldWithOtherFieldsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationFieldWithOtherFieldsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationFieldWithOtherFieldsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationFieldWithOtherFieldsValidationError) ErrorName() string {
	return "DurationFieldWithOtherFieldsValidationError"
}

// Error satisfies the builtin error interface
func (e DurationFieldWithOtherFieldsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDurationFieldWithOtherFields.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationFieldWithOtherFieldsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationFieldWithOtherFieldsValidationError{}
