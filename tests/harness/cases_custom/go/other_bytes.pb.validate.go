// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_bytes.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_bytes_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on BytesNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesNone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// BytesNoneValidationError is the validation error returned by
// BytesNone.Validate if the designated constraints aren't met.
type BytesNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesNoneValidationError) ErrorName() string { return "BytesNoneValidationError" }

// Error satisfies the builtin error interface
func (e BytesNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesNoneValidationError{}

// Validate checks the field values on BytesConst with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesConst) Validate() error {
	if m == nil {
		return nil
	}

	if !bytes.Equal(m.GetVal(), []uint8{0x66, 0x6F, 0x6F}) {
		return BytesConstValidationError{
			field:  "Val",
			reason: "value must equal [102 111 111]",
		}
	}

	return nil
}

// BytesConstValidationError is the validation error returned by
// BytesConst.Validate if the designated constraints aren't met.
type BytesConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesConstValidationError) ErrorName() string { return "BytesConstValidationError" }

// Error satisfies the builtin error interface
func (e BytesConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesConstValidationError{}

// Validate checks the field values on BytesIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _BytesIn_Val_InLookup[string(m.GetVal())]; !ok {
		return BytesInValidationError{
			field:  "Val",
			reason: "value must be in list [[98 97 114] [98 97 122]]",
		}
	}

	return nil
}

// BytesInValidationError is the validation error returned by BytesIn.Validate
// if the designated constraints aren't met.
type BytesInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesInValidationError) ErrorName() string { return "BytesInValidationError" }

// Error satisfies the builtin error interface
func (e BytesInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesInValidationError{}

var _BytesIn_Val_InLookup = map[string]struct{}{
	"\x62\x61\x72": {},
	"\x62\x61\x7A": {},
}

// Validate checks the field values on BytesNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _BytesNotIn_Val_NotInLookup[string(m.GetVal())]; ok {
		return BytesNotInValidationError{
			field:  "Val",
			reason: "value must not be in list [[102 105 122 122] [98 117 122 122]]",
		}
	}

	return nil
}

// BytesNotInValidationError is the validation error returned by
// BytesNotIn.Validate if the designated constraints aren't met.
type BytesNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesNotInValidationError) ErrorName() string { return "BytesNotInValidationError" }

// Error satisfies the builtin error interface
func (e BytesNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesNotInValidationError{}

var _BytesNotIn_Val_NotInLookup = map[string]struct{}{
	"\x66\x69\x7A\x7A": {},
	"\x62\x75\x7A\x7A": {},
}

// Validate checks the field values on BytesLen with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesLen) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) != 3 {
		return BytesLenValidationError{
			field:  "Val",
			reason: "value length must be 3 bytes",
		}
	}

	return nil
}

// BytesLenValidationError is the validation error returned by
// BytesLen.Validate if the designated constraints aren't met.
type BytesLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesLenValidationError) ErrorName() string { return "BytesLenValidationError" }

// Error satisfies the builtin error interface
func (e BytesLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesLenValidationError{}

// Validate checks the field values on BytesMinLen with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesMinLen) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) < 3 {
		return BytesMinLenValidationError{
			field:  "Val",
			reason: "value length must be at least 3 bytes",
		}
	}

	return nil
}

// BytesMinLenValidationError is the validation error returned by
// BytesMinLen.Validate if the designated constraints aren't met.
type BytesMinLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesMinLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesMinLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesMinLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesMinLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesMinLenValidationError) ErrorName() string { return "BytesMinLenValidationError" }

// Error satisfies the builtin error interface
func (e BytesMinLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesMinLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesMinLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesMinLenValidationError{}

// Validate checks the field values on BytesMaxLen with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesMaxLen) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) > 5 {
		return BytesMaxLenValidationError{
			field:  "Val",
			reason: "value length must be at most 5 bytes",
		}
	}

	return nil
}

// BytesMaxLenValidationError is the validation error returned by
// BytesMaxLen.Validate if the designated constraints aren't met.
type BytesMaxLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesMaxLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesMaxLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesMaxLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesMaxLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesMaxLenValidationError) ErrorName() string { return "BytesMaxLenValidationError" }

// Error satisfies the builtin error interface
func (e BytesMaxLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesMaxLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesMaxLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesMaxLenValidationError{}

// Validate checks the field values on BytesMinMaxLen with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesMinMaxLen) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetVal()); l < 3 || l > 5 {
		return BytesMinMaxLenValidationError{
			field:  "Val",
			reason: "value length must be between 3 and 5 bytes, inclusive",
		}
	}

	return nil
}

// BytesMinMaxLenValidationError is the validation error returned by
// BytesMinMaxLen.Validate if the designated constraints aren't met.
type BytesMinMaxLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesMinMaxLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesMinMaxLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesMinMaxLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesMinMaxLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesMinMaxLenValidationError) ErrorName() string { return "BytesMinMaxLenValidationError" }

// Error satisfies the builtin error interface
func (e BytesMinMaxLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesMinMaxLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesMinMaxLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesMinMaxLenValidationError{}

// Validate checks the field values on BytesEqualMinMaxLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BytesEqualMinMaxLen) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) != 5 {
		return BytesEqualMinMaxLenValidationError{
			field:  "Val",
			reason: "value length must be 5 bytes",
		}
	}

	return nil
}

// BytesEqualMinMaxLenValidationError is the validation error returned by
// BytesEqualMinMaxLen.Validate if the designated constraints aren't met.
type BytesEqualMinMaxLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesEqualMinMaxLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesEqualMinMaxLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesEqualMinMaxLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesEqualMinMaxLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesEqualMinMaxLenValidationError) ErrorName() string {
	return "BytesEqualMinMaxLenValidationError"
}

// Error satisfies the builtin error interface
func (e BytesEqualMinMaxLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesEqualMinMaxLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesEqualMinMaxLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesEqualMinMaxLenValidationError{}

// Validate checks the field values on BytesPattern with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesPattern) Validate() error {
	if m == nil {
		return nil
	}

	if !_BytesPattern_Val_Pattern.Match(m.GetVal()) {
		return BytesPatternValidationError{
			field:  "Val",
			reason: "value does not match regex pattern \"^[\\x00-\\u007f]+$\"",
		}
	}

	return nil
}

// BytesPatternValidationError is the validation error returned by
// BytesPattern.Validate if the designated constraints aren't met.
type BytesPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesPatternValidationError) ErrorName() string { return "BytesPatternValidationError" }

// Error satisfies the builtin error interface
func (e BytesPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesPatternValidationError{}

var _BytesPattern_Val_Pattern = regexp.MustCompile("^[\x00-\u007f]+$")

// Validate checks the field values on BytesPrefix with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesPrefix) Validate() error {
	if m == nil {
		return nil
	}

	if !bytes.HasPrefix(m.GetVal(), []uint8{0x99}) {
		return BytesPrefixValidationError{
			field:  "Val",
			reason: "value does not have prefix \"\\x99\"",
		}
	}

	return nil
}

// BytesPrefixValidationError is the validation error returned by
// BytesPrefix.Validate if the designated constraints aren't met.
type BytesPrefixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesPrefixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesPrefixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesPrefixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesPrefixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesPrefixValidationError) ErrorName() string { return "BytesPrefixValidationError" }

// Error satisfies the builtin error interface
func (e BytesPrefixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesPrefix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesPrefixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesPrefixValidationError{}

// Validate checks the field values on BytesContains with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesContains) Validate() error {
	if m == nil {
		return nil
	}

	if !bytes.Contains(m.GetVal(), []uint8{0x62, 0x61, 0x72}) {
		return BytesContainsValidationError{
			field:  "Val",
			reason: "value does not contain \"\\x62\\x61\\x72\"",
		}
	}

	return nil
}

// BytesContainsValidationError is the validation error returned by
// BytesContains.Validate if the designated constraints aren't met.
type BytesContainsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesContainsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesContainsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesContainsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesContainsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesContainsValidationError) ErrorName() string { return "BytesContainsValidationError" }

// Error satisfies the builtin error interface
func (e BytesContainsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesContains.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesContainsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesContainsValidationError{}

// Validate checks the field values on BytesSuffix with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BytesSuffix) Validate() error {
	if m == nil {
		return nil
	}

	if !bytes.HasSuffix(m.GetVal(), []uint8{0x62, 0x75, 0x7A, 0x7A}) {
		return BytesSuffixValidationError{
			field:  "Val",
			reason: "value does not have suffix \"\\x62\\x75\\x7A\\x7A\"",
		}
	}

	return nil
}

// BytesSuffixValidationError is the validation error returned by
// BytesSuffix.Validate if the designated constraints aren't met.
type BytesSuffixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesSuffixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesSuffixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesSuffixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesSuffixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesSuffixValidationError) ErrorName() string { return "BytesSuffixValidationError" }

// Error satisfies the builtin error interface
func (e BytesSuffixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesSuffix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesSuffixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesSuffixValidationError{}

// Validate checks the field values on BytesIP with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesIP) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.IP(m.GetVal()); ip.To16() == nil {
		return BytesIPValidationError{
			field:  "Val",
			reason: "value must be a valid IP address",
		}
	}

	return nil
}

// BytesIPValidationError is the validation error returned by BytesIP.Validate
// if the designated constraints aren't met.
type BytesIPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesIPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesIPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesIPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesIPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesIPValidationError) ErrorName() string { return "BytesIPValidationError" }

// Error satisfies the builtin error interface
func (e BytesIPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesIP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesIPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesIPValidationError{}

// Validate checks the field values on BytesIPv4 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesIPv4) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.IP(m.GetVal()); ip.To4() == nil {
		return BytesIPv4ValidationError{
			field:  "Val",
			reason: "value must be a valid IPv4 address",
		}
	}

	return nil
}

// BytesIPv4ValidationError is the validation error returned by
// BytesIPv4.Validate if the designated constraints aren't met.
type BytesIPv4ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesIPv4ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesIPv4ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesIPv4ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesIPv4ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesIPv4ValidationError) ErrorName() string { return "BytesIPv4ValidationError" }

// Error satisfies the builtin error interface
func (e BytesIPv4ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesIPv4.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesIPv4ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesIPv4ValidationError{}

// Validate checks the field values on BytesIPv6 with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BytesIPv6) Validate() error {
	if m == nil {
		return nil
	}

	if ip := net.IP(m.GetVal()); ip.To16() == nil || ip.To4() != nil {
		return BytesIPv6ValidationError{
			field:  "Val",
			reason: "value must be a valid IPv6 address",
		}
	}

	return nil
}

// BytesIPv6ValidationError is the validation error returned by
// BytesIPv6.Validate if the designated constraints aren't met.
type BytesIPv6ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BytesIPv6ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BytesIPv6ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BytesIPv6ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BytesIPv6ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BytesIPv6ValidationError) ErrorName() string { return "BytesIPv6ValidationError" }

// Error satisfies the builtin error interface
func (e BytesIPv6ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBytesIPv6.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BytesIPv6ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BytesIPv6ValidationError{}
