// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_repeated.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_repeated_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Embed with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Embed) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 0 {
		return EmbedValidationError{
			field:  "Val",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// EmbedValidationError is the validation error returned by Embed.Validate if
// the designated constraints aren't met.
type EmbedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbedValidationError) ErrorName() string { return "EmbedValidationError" }

// Error satisfies the builtin error interface
func (e EmbedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbedValidationError{}

// Validate checks the field values on RepeatedNone with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedNone) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RepeatedNoneValidationError is the validation error returned by
// RepeatedNone.Validate if the designated constraints aren't met.
type RepeatedNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedNoneValidationError) ErrorName() string { return "RepeatedNoneValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedNoneValidationError{}

// Validate checks the field values on RepeatedEmbedNone with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedEmbedNone) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedEmbedNoneValidationError{
					field:  fmt.Sprintf("Val[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RepeatedEmbedNoneValidationError is the validation error returned by
// RepeatedEmbedNone.Validate if the designated constraints aren't met.
type RepeatedEmbedNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEmbedNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEmbedNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEmbedNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEmbedNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEmbedNoneValidationError) ErrorName() string {
	return "RepeatedEmbedNoneValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEmbedNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEmbedNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEmbedNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEmbedNoneValidationError{}

// Validate checks the field values on RepeatedEmbedCrossPackageNone with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedEmbedCrossPackageNone) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedEmbedCrossPackageNoneValidationError{
					field:  fmt.Sprintf("Val[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RepeatedEmbedCrossPackageNoneValidationError is the validation error
// returned by RepeatedEmbedCrossPackageNone.Validate if the designated
// constraints aren't met.
type RepeatedEmbedCrossPackageNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEmbedCrossPackageNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEmbedCrossPackageNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEmbedCrossPackageNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEmbedCrossPackageNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEmbedCrossPackageNoneValidationError) ErrorName() string {
	return "RepeatedEmbedCrossPackageNoneValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEmbedCrossPackageNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEmbedCrossPackageNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEmbedCrossPackageNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEmbedCrossPackageNoneValidationError{}

// Validate checks the field values on RepeatedMin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedMin) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) < 2 {
		return RepeatedMinValidationError{
			field:  "Val",
			reason: "value must contain at least 2 item(s)",
		}
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedMinValidationError{
					field:  fmt.Sprintf("Val[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RepeatedMinValidationError is the validation error returned by
// RepeatedMin.Validate if the designated constraints aren't met.
type RepeatedMinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedMinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedMinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedMinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedMinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedMinValidationError) ErrorName() string { return "RepeatedMinValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedMinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedMin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedMinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedMinValidationError{}

// Validate checks the field values on RepeatedMax with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedMax) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) > 3 {
		return RepeatedMaxValidationError{
			field:  "Val",
			reason: "value must contain no more than 3 item(s)",
		}
	}

	return nil
}

// RepeatedMaxValidationError is the validation error returned by
// RepeatedMax.Validate if the designated constraints aren't met.
type RepeatedMaxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedMaxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedMaxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedMaxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedMaxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedMaxValidationError) ErrorName() string { return "RepeatedMaxValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedMaxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedMax.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedMaxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedMaxValidationError{}

// Validate checks the field values on RepeatedMinMax with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedMinMax) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetVal()); l < 2 || l > 4 {
		return RepeatedMinMaxValidationError{
			field:  "Val",
			reason: "value must contain between 2 and 4 items, inclusive",
		}
	}

	return nil
}

// RepeatedMinMaxValidationError is the validation error returned by
// RepeatedMinMax.Validate if the designated constraints aren't met.
type RepeatedMinMaxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedMinMaxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedMinMaxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedMinMaxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedMinMaxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedMinMaxValidationError) ErrorName() string { return "RepeatedMinMaxValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedMinMaxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedMinMax.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedMinMaxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedMinMaxValidationError{}

// Validate checks the field values on RepeatedExact with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedExact) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) != 3 {
		return RepeatedExactValidationError{
			field:  "Val",
			reason: "value must contain exactly 3 item(s)",
		}
	}

	return nil
}

// RepeatedExactValidationError is the validation error returned by
// RepeatedExact.Validate if the designated constraints aren't met.
type RepeatedExactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedExactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedExactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedExactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedExactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedExactValidationError) ErrorName() string { return "RepeatedExactValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedExactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedExact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedExactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedExactValidationError{}

// Validate checks the field values on RepeatedUnique with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedUnique) Validate() error {
	if m == nil {
		return nil
	}

	_RepeatedUnique_Val_Unique := make(map[string]struct{}, len(m.GetVal()))

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, exists := _RepeatedUnique_Val_Unique[item]; exists {
			return RepeatedUniqueValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_RepeatedUnique_Val_Unique[item] = struct{}{}
		}

		// no validation rules for Val[idx]
	}

	return nil
}

// RepeatedUniqueValidationError is the validation error returned by
// RepeatedUnique.Validate if the designated constraints aren't met.
type RepeatedUniqueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedUniqueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedUniqueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedUniqueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedUniqueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedUniqueValidationError) ErrorName() string { return "RepeatedUniqueValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedUniqueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedUnique.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedUniqueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedUniqueValidationError{}

// Validate checks the field values on RepeatedItemRule with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedItemRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if item <= 0 {
			return RepeatedItemRuleValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be greater than 0",
			}
		}

	}

	return nil
}

// RepeatedItemRuleValidationError is the validation error returned by
// RepeatedItemRule.Validate if the designated constraints aren't met.
type RepeatedItemRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedItemRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedItemRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedItemRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedItemRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedItemRuleValidationError) ErrorName() string { return "RepeatedItemRuleValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedItemRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedItemRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedItemRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedItemRuleValidationError{}

// Validate checks the field values on RepeatedItemPattern with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedItemPattern) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if !_RepeatedItemPattern_Val_Pattern.MatchString(item) {
			return RepeatedItemPatternValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value does not match regex pattern \"(?i)^[a-z0-9]+$\"",
			}
		}

	}

	return nil
}

// RepeatedItemPatternValidationError is the validation error returned by
// RepeatedItemPattern.Validate if the designated constraints aren't met.
type RepeatedItemPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedItemPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedItemPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedItemPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedItemPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedItemPatternValidationError) ErrorName() string {
	return "RepeatedItemPatternValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedItemPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedItemPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedItemPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedItemPatternValidationError{}

var _RepeatedItemPattern_Val_Pattern = regexp.MustCompile("(?i)^[a-z0-9]+$")

// Validate checks the field values on RepeatedEmbedSkip with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedEmbedSkip) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		// skipping validation for val

	}

	return nil
}

// RepeatedEmbedSkipValidationError is the validation error returned by
// RepeatedEmbedSkip.Validate if the designated constraints aren't met.
type RepeatedEmbedSkipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEmbedSkipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEmbedSkipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEmbedSkipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEmbedSkipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEmbedSkipValidationError) ErrorName() string {
	return "RepeatedEmbedSkipValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEmbedSkipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEmbedSkip.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEmbedSkipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEmbedSkipValidationError{}

// Validate checks the field values on RepeatedItemIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedItemIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedItemIn_Val_InLookup[item]; !ok {
			return RepeatedItemInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be in list [foo bar]",
			}
		}

	}

	return nil
}

// RepeatedItemInValidationError is the validation error returned by
// RepeatedItemIn.Validate if the designated constraints aren't met.
type RepeatedItemInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedItemInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedItemInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedItemInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedItemInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedItemInValidationError) ErrorName() string { return "RepeatedItemInValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedItemInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedItemIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedItemInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedItemInValidationError{}

var _RepeatedItemIn_Val_InLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}

// Validate checks the field values on RepeatedItemNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedItemNotIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedItemNotIn_Val_NotInLookup[item]; ok {
			return RepeatedItemNotInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must not be in list [foo bar]",
			}
		}

	}

	return nil
}

// RepeatedItemNotInValidationError is the validation error returned by
// RepeatedItemNotIn.Validate if the designated constraints aren't met.
type RepeatedItemNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedItemNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedItemNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedItemNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedItemNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedItemNotInValidationError) ErrorName() string {
	return "RepeatedItemNotInValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedItemNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedItemNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedItemNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedItemNotInValidationError{}

var _RepeatedItemNotIn_Val_NotInLookup = map[string]struct{}{
	"foo": {},
	"bar": {},
}

// Validate checks the field values on RepeatedEnumIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RepeatedEnumIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumIn_Val_InLookup[item]; !ok {
			return RepeatedEnumInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be in list [0]",
			}
		}

	}

	return nil
}

// RepeatedEnumInValidationError is the validation error returned by
// RepeatedEnumIn.Validate if the designated constraints aren't met.
type RepeatedEnumInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEnumInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEnumInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEnumInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEnumInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEnumInValidationError) ErrorName() string { return "RepeatedEnumInValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedEnumInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEnumIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEnumInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEnumInValidationError{}

var _RepeatedEnumIn_Val_InLookup = map[AnEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEnumNotIn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedEnumNotIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEnumNotIn_Val_NotInLookup[item]; ok {
			return RepeatedEnumNotInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must not be in list [0]",
			}
		}

	}

	return nil
}

// RepeatedEnumNotInValidationError is the validation error returned by
// RepeatedEnumNotIn.Validate if the designated constraints aren't met.
type RepeatedEnumNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEnumNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEnumNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEnumNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEnumNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEnumNotInValidationError) ErrorName() string {
	return "RepeatedEnumNotInValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEnumNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEnumNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEnumNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEnumNotInValidationError{}

var _RepeatedEnumNotIn_Val_NotInLookup = map[AnEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEmbeddedEnumIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedEmbeddedEnumIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEmbeddedEnumIn_Val_InLookup[item]; !ok {
			return RepeatedEmbeddedEnumInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be in list [0]",
			}
		}

	}

	return nil
}

// RepeatedEmbeddedEnumInValidationError is the validation error returned by
// RepeatedEmbeddedEnumIn.Validate if the designated constraints aren't met.
type RepeatedEmbeddedEnumInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEmbeddedEnumInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEmbeddedEnumInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEmbeddedEnumInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEmbeddedEnumInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEmbeddedEnumInValidationError) ErrorName() string {
	return "RepeatedEmbeddedEnumInValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEmbeddedEnumInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEmbeddedEnumIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEmbeddedEnumInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEmbeddedEnumInValidationError{}

var _RepeatedEmbeddedEnumIn_Val_InLookup = map[RepeatedEmbeddedEnumIn_AnotherInEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedEmbeddedEnumNotIn with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedEmbeddedEnumNotIn) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := _RepeatedEmbeddedEnumNotIn_Val_NotInLookup[item]; ok {
			return RepeatedEmbeddedEnumNotInValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must not be in list [0]",
			}
		}

	}

	return nil
}

// RepeatedEmbeddedEnumNotInValidationError is the validation error returned by
// RepeatedEmbeddedEnumNotIn.Validate if the designated constraints aren't met.
type RepeatedEmbeddedEnumNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEmbeddedEnumNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEmbeddedEnumNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEmbeddedEnumNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEmbeddedEnumNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEmbeddedEnumNotInValidationError) ErrorName() string {
	return "RepeatedEmbeddedEnumNotInValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEmbeddedEnumNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEmbeddedEnumNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEmbeddedEnumNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEmbeddedEnumNotInValidationError{}

var _RepeatedEmbeddedEnumNotIn_Val_NotInLookup = map[RepeatedEmbeddedEnumNotIn_AnotherNotInEnum]struct{}{
	0: {},
}

// Validate checks the field values on RepeatedMinAndItemLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedMinAndItemLen) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) < 1 {
		return RepeatedMinAndItemLenValidationError{
			field:  "Val",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) != 3 {
			return RepeatedMinAndItemLenValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value length must be 3 runes",
			}

		}

	}

	return nil
}

// RepeatedMinAndItemLenValidationError is the validation error returned by
// RepeatedMinAndItemLen.Validate if the designated constraints aren't met.
type RepeatedMinAndItemLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedMinAndItemLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedMinAndItemLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedMinAndItemLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedMinAndItemLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedMinAndItemLenValidationError) ErrorName() string {
	return "RepeatedMinAndItemLenValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedMinAndItemLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedMinAndItemLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedMinAndItemLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedMinAndItemLenValidationError{}

// Validate checks the field values on RepeatedMinAndMaxItemLen with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedMinAndMaxItemLen) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetVal()); l < 1 || l > 3 {
		return RepeatedMinAndMaxItemLenValidationError{
			field:  "Val",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
	}

	return nil
}

// RepeatedMinAndMaxItemLenValidationError is the validation error returned by
// RepeatedMinAndMaxItemLen.Validate if the designated constraints aren't met.
type RepeatedMinAndMaxItemLenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedMinAndMaxItemLenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedMinAndMaxItemLenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedMinAndMaxItemLenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedMinAndMaxItemLenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedMinAndMaxItemLenValidationError) ErrorName() string {
	return "RepeatedMinAndMaxItemLenValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedMinAndMaxItemLenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedMinAndMaxItemLen.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedMinAndMaxItemLenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedMinAndMaxItemLenValidationError{}

// Validate checks the field values on RepeatedDuration with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RepeatedDuration) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if d := item; d != nil {
			dur, err := ptypes.Duration(d)
			if err != nil {
				return RepeatedDurationValidationError{
					field:  fmt.Sprintf("Val[%v]", idx),
					reason: "value is not a valid duration",
					cause:  err,
				}
			}

			gte := time.Duration(0*time.Second + 1000000*time.Nanosecond)

			if dur < gte {
				return RepeatedDurationValidationError{
					field:  fmt.Sprintf("Val[%v]", idx),
					reason: "value must be greater than or equal to 1ms",
				}
			}

		}

	}

	return nil
}

// RepeatedDurationValidationError is the validation error returned by
// RepeatedDuration.Validate if the designated constraints aren't met.
type RepeatedDurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedDurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedDurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedDurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedDurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedDurationValidationError) ErrorName() string { return "RepeatedDurationValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedDurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedDurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedDurationValidationError{}
