// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_wkt_any.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_wkt_any_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AnyNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AnyNone) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnyNoneValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AnyNoneValidationError is the validation error returned by AnyNone.Validate
// if the designated constraints aren't met.
type AnyNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyNoneValidationError) ErrorName() string { return "AnyNoneValidationError" }

// Error satisfies the builtin error interface
func (e AnyNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnyNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyNoneValidationError{}

// Validate checks the field values on AnyRequired with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AnyRequired) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() == nil {
		return AnyRequiredValidationError{
			field:  "Val",
			reason: "value is required",
		}
	}

	if a := m.GetVal(); a != nil {

	}

	return nil
}

// AnyRequiredValidationError is the validation error returned by
// AnyRequired.Validate if the designated constraints aren't met.
type AnyRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyRequiredValidationError) ErrorName() string { return "AnyRequiredValidationError" }

// Error satisfies the builtin error interface
func (e AnyRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnyRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyRequiredValidationError{}

// Validate checks the field values on AnyIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AnyIn) Validate() error {
	if m == nil {
		return nil
	}

	if a := m.GetVal(); a != nil {

		if _, ok := _AnyIn_Val_InLookup[a.GetTypeUrl()]; !ok {
			return AnyInValidationError{
				field:  "Val",
				reason: "type URL must be in list [type.googleapis.com/google.protobuf.Duration]",
			}
		}

	}

	return nil
}

// AnyInValidationError is the validation error returned by AnyIn.Validate if
// the designated constraints aren't met.
type AnyInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyInValidationError) ErrorName() string { return "AnyInValidationError" }

// Error satisfies the builtin error interface
func (e AnyInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnyIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyInValidationError{}

var _AnyIn_Val_InLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Duration": {},
}

// Validate checks the field values on AnyNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AnyNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if a := m.GetVal(); a != nil {

		if _, ok := _AnyNotIn_Val_NotInLookup[a.GetTypeUrl()]; ok {
			return AnyNotInValidationError{
				field:  "Val",
				reason: "type URL must not be in list [type.googleapis.com/google.protobuf.Timestamp]",
			}
		}

	}

	return nil
}

// AnyNotInValidationError is the validation error returned by
// AnyNotIn.Validate if the designated constraints aren't met.
type AnyNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnyNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnyNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnyNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnyNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnyNotInValidationError) ErrorName() string { return "AnyNotInValidationError" }

// Error satisfies the builtin error interface
func (e AnyNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnyNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnyNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnyNotInValidationError{}

var _AnyNotIn_Val_NotInLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Timestamp": {},
}
