// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_kitchen_sink.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_kitchen_sink_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ComplexTestMsg with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ComplexTestMsg) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetConst() != "abcd" {
		return ComplexTestMsgValidationError{
			field:  "Const",
			reason: "value must equal abcd",
		}
	}

	if v, ok := interface{}(m.GetNested()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComplexTestMsgValidationError{
				field:  "Nested",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetIntConst() != 5 {
		return ComplexTestMsgValidationError{
			field:  "IntConst",
			reason: "value must equal 5",
		}
	}

	if m.GetBoolConst() != false {
		return ComplexTestMsgValidationError{
			field:  "BoolConst",
			reason: "value must equal false",
		}
	}

	if wrapper := m.GetFloatVal(); wrapper != nil {

		if wrapper.GetValue() <= 0 {
			return ComplexTestMsgValidationError{
				field:  "FloatVal",
				reason: "value must be greater than 0",
			}
		}

	}

	if m.GetDurVal() == nil {
		return ComplexTestMsgValidationError{
			field:  "DurVal",
			reason: "value is required",
		}
	}

	if d := m.GetDurVal(); d != nil {
		dur, err := ptypes.Duration(d)
		if err != nil {
			return ComplexTestMsgValidationError{
				field:  "DurVal",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lt := time.Duration(17*time.Second + 0*time.Nanosecond)

		if dur >= lt {
			return ComplexTestMsgValidationError{
				field:  "DurVal",
				reason: "value must be less than 17s",
			}
		}

	}

	if t := m.GetTsVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return ComplexTestMsgValidationError{
				field:  "TsVal",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		gt := time.Unix(7, 0)

		if ts.Sub(gt) <= 0 {
			return ComplexTestMsgValidationError{
				field:  "TsVal",
				reason: "value must be greater than 1970-01-01 00:00:07 +0000 UTC",
			}
		}

	}

	if v, ok := interface{}(m.GetAnother()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComplexTestMsgValidationError{
				field:  "Another",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetFloatConst() >= 8 {
		return ComplexTestMsgValidationError{
			field:  "FloatConst",
			reason: "value must be less than 8",
		}
	}

	if _, ok := _ComplexTestMsg_DoubleIn_InLookup[m.GetDoubleIn()]; !ok {
		return ComplexTestMsgValidationError{
			field:  "DoubleIn",
			reason: "value must be in list [456.789 123]",
		}
	}

	if m.GetEnumConst() != 2 {
		return ComplexTestMsgValidationError{
			field:  "EnumConst",
			reason: "value must equal 2",
		}
	}

	if a := m.GetAnyVal(); a != nil {

		if _, ok := _ComplexTestMsg_AnyVal_InLookup[a.GetTypeUrl()]; !ok {
			return ComplexTestMsgValidationError{
				field:  "AnyVal",
				reason: "type URL must be in list [type.googleapis.com/google.protobuf.Duration]",
			}
		}

	}

	for idx, item := range m.GetRepTsVal() {
		_, _ = idx, item

		if t := item; t != nil {
			ts, err := ptypes.Timestamp(t)
			if err != nil {
				return ComplexTestMsgValidationError{
					field:  fmt.Sprintf("RepTsVal[%v]", idx),
					reason: "value is not a valid timestamp",
					cause:  err,
				}
			}

			gte := time.Unix(0, 1000000)

			if ts.Sub(gte) < 0 {
				return ComplexTestMsgValidationError{
					field:  fmt.Sprintf("RepTsVal[%v]", idx),
					reason: "value must be greater than or equal to 1970-01-01 00:00:00.001 +0000 UTC",
				}
			}

		}

	}

	for key, val := range m.GetMapVal() {
		_ = val

		if key >= 0 {
			return ComplexTestMsgValidationError{
				field:  fmt.Sprintf("MapVal[%v]", key),
				reason: "value must be less than 0",
			}
		}

		// no validation rules for MapVal[key]
	}

	if !bytes.Equal(m.GetBytesVal(), []uint8{0x0, 0x99}) {
		return ComplexTestMsgValidationError{
			field:  "BytesVal",
			reason: "value must equal [0 153]",
		}
	}

	switch m.O.(type) {

	case *ComplexTestMsg_X:
		// no validation rules for X

	case *ComplexTestMsg_Y:
		// no validation rules for Y

	default:
		return ComplexTestMsgValidationError{
			field:  "O",
			reason: "value is required",
		}

	}

	return nil
}

// ComplexTestMsgValidationError is the validation error returned by
// ComplexTestMsg.Validate if the designated constraints aren't met.
type ComplexTestMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComplexTestMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComplexTestMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComplexTestMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComplexTestMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComplexTestMsgValidationError) ErrorName() string { return "ComplexTestMsgValidationError" }

// Error satisfies the builtin error interface
func (e ComplexTestMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplexTestMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComplexTestMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComplexTestMsgValidationError{}

var _ComplexTestMsg_DoubleIn_InLookup = map[float64]struct{}{
	456.789: {},
	123:     {},
}

var _ComplexTestMsg_AnyVal_InLookup = map[string]struct{}{
	"type.googleapis.com/google.protobuf.Duration": {},
}

// Validate checks the field values on KitchenSinkMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *KitchenSinkMessage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KitchenSinkMessageValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// KitchenSinkMessageValidationError is the validation error returned by
// KitchenSinkMessage.Validate if the designated constraints aren't met.
type KitchenSinkMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KitchenSinkMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KitchenSinkMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KitchenSinkMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KitchenSinkMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KitchenSinkMessageValidationError) ErrorName() string {
	return "KitchenSinkMessageValidationError"
}

// Error satisfies the builtin error interface
func (e KitchenSinkMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKitchenSinkMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KitchenSinkMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KitchenSinkMessageValidationError{}
