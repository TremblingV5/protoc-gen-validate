// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_oneofs.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_oneofs_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TestOneOfMsg with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TestOneOfMsg) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != true {
		return TestOneOfMsgValidationError{
			field:  "Val",
			reason: "value must equal true",
		}
	}

	return nil
}

// TestOneOfMsgValidationError is the validation error returned by
// TestOneOfMsg.Validate if the designated constraints aren't met.
type TestOneOfMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestOneOfMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestOneOfMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestOneOfMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestOneOfMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestOneOfMsgValidationError) ErrorName() string { return "TestOneOfMsgValidationError" }

// Error satisfies the builtin error interface
func (e TestOneOfMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestOneOfMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestOneOfMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestOneOfMsgValidationError{}

// Validate checks the field values on OneOfNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OneOfNone) Validate() error {
	if m == nil {
		return nil
	}

	switch m.O.(type) {

	case *OneOfNone_X:
		// no validation rules for X

	case *OneOfNone_Y:
		// no validation rules for Y

	}

	return nil
}

// OneOfNoneValidationError is the validation error returned by
// OneOfNone.Validate if the designated constraints aren't met.
type OneOfNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneOfNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneOfNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneOfNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneOfNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneOfNoneValidationError) ErrorName() string { return "OneOfNoneValidationError" }

// Error satisfies the builtin error interface
func (e OneOfNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOfNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneOfNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneOfNoneValidationError{}

// Validate checks the field values on OneOf with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OneOf) Validate() error {
	if m == nil {
		return nil
	}

	switch m.O.(type) {

	case *OneOf_X:

		if !strings.HasPrefix(m.GetX(), "foo") {
			return OneOfValidationError{
				field:  "X",
				reason: "value does not have prefix \"foo\"",
			}
		}

	case *OneOf_Y:

		if m.GetY() <= 0 {
			return OneOfValidationError{
				field:  "Y",
				reason: "value must be greater than 0",
			}
		}

	case *OneOf_Z:

		if v, ok := interface{}(m.GetZ()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfValidationError{
					field:  "Z",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OneOfValidationError is the validation error returned by OneOf.Validate if
// the designated constraints aren't met.
type OneOfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneOfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneOfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneOfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneOfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneOfValidationError) ErrorName() string { return "OneOfValidationError" }

// Error satisfies the builtin error interface
func (e OneOfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneOfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneOfValidationError{}

// Validate checks the field values on OneOfRequired with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OneOfRequired) Validate() error {
	if m == nil {
		return nil
	}

	switch m.O.(type) {

	case *OneOfRequired_X:
		// no validation rules for X

	case *OneOfRequired_Y:
		// no validation rules for Y

	case *OneOfRequired_NameWithUnderscores:
		// no validation rules for NameWithUnderscores

	case *OneOfRequired_UnderAnd_1Number:
		// no validation rules for UnderAnd_1Number

	default:
		return OneOfRequiredValidationError{
			field:  "O",
			reason: "value is required",
		}

	}

	return nil
}

// OneOfRequiredValidationError is the validation error returned by
// OneOfRequired.Validate if the designated constraints aren't met.
type OneOfRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneOfRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneOfRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneOfRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneOfRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneOfRequiredValidationError) ErrorName() string { return "OneOfRequiredValidationError" }

// Error satisfies the builtin error interface
func (e OneOfRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOfRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneOfRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneOfRequiredValidationError{}
