// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_wkt_timestamp.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_wkt_timestamp_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TimestampNone with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampNone) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimestampNoneValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimestampNoneValidationError is the validation error returned by
// TimestampNone.Validate if the designated constraints aren't met.
type TimestampNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampNoneValidationError) ErrorName() string { return "TimestampNoneValidationError" }

// Error satisfies the builtin error interface
func (e TimestampNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampNoneValidationError{}

// Validate checks the field values on TimestampRequired with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TimestampRequired) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() == nil {
		return TimestampRequiredValidationError{
			field:  "Val",
			reason: "value is required",
		}
	}

	return nil
}

// TimestampRequiredValidationError is the validation error returned by
// TimestampRequired.Validate if the designated constraints aren't met.
type TimestampRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampRequiredValidationError) ErrorName() string {
	return "TimestampRequiredValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampRequiredValidationError{}

// Validate checks the field values on TimestampConst with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampConst) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampConstValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		if !ts.Equal(time.Unix(3, 0)) {
			return TimestampConstValidationError{
				field:  "Val",
				reason: "value must equal 1970-01-01 00:00:03 +0000 UTC",
			}
		}

	}

	return nil
}

// TimestampConstValidationError is the validation error returned by
// TimestampConst.Validate if the designated constraints aren't met.
type TimestampConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampConstValidationError) ErrorName() string { return "TimestampConstValidationError" }

// Error satisfies the builtin error interface
func (e TimestampConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampConstValidationError{}

// Validate checks the field values on TimestampLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampLT) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampLTValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lt := time.Unix(0, 0)

		if ts.Sub(lt) >= 0 {
			return TimestampLTValidationError{
				field:  "Val",
				reason: "value must be less than 1970-01-01 00:00:00 +0000 UTC",
			}
		}

	}

	return nil
}

// TimestampLTValidationError is the validation error returned by
// TimestampLT.Validate if the designated constraints aren't met.
type TimestampLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampLTValidationError) ErrorName() string { return "TimestampLTValidationError" }

// Error satisfies the builtin error interface
func (e TimestampLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampLTValidationError{}

// Validate checks the field values on TimestampLTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampLTE) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampLTEValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lte := time.Unix(1, 0)

		if ts.Sub(lte) > 0 {
			return TimestampLTEValidationError{
				field:  "Val",
				reason: "value must be less than or equal to 1970-01-01 00:00:01 +0000 UTC",
			}
		}

	}

	return nil
}

// TimestampLTEValidationError is the validation error returned by
// TimestampLTE.Validate if the designated constraints aren't met.
type TimestampLTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampLTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampLTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampLTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampLTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampLTEValidationError) ErrorName() string { return "TimestampLTEValidationError" }

// Error satisfies the builtin error interface
func (e TimestampLTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampLTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampLTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampLTEValidationError{}

// Validate checks the field values on TimestampGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampGT) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		gt := time.Unix(0, 1000)

		if ts.Sub(gt) <= 0 {
			return TimestampGTValidationError{
				field:  "Val",
				reason: "value must be greater than 1970-01-01 00:00:00.000001 +0000 UTC",
			}
		}

	}

	return nil
}

// TimestampGTValidationError is the validation error returned by
// TimestampGT.Validate if the designated constraints aren't met.
type TimestampGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTValidationError) ErrorName() string { return "TimestampGTValidationError" }

// Error satisfies the builtin error interface
func (e TimestampGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTValidationError{}

// Validate checks the field values on TimestampGTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampGTE) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTEValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		gte := time.Unix(0, 1000000)

		if ts.Sub(gte) < 0 {
			return TimestampGTEValidationError{
				field:  "Val",
				reason: "value must be greater than or equal to 1970-01-01 00:00:00.001 +0000 UTC",
			}
		}

	}

	return nil
}

// TimestampGTEValidationError is the validation error returned by
// TimestampGTE.Validate if the designated constraints aren't met.
type TimestampGTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTEValidationError) ErrorName() string { return "TimestampGTEValidationError" }

// Error satisfies the builtin error interface
func (e TimestampGTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTEValidationError{}

// Validate checks the field values on TimestampGTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampGTLT) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTLTValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lt := time.Unix(1, 0)
		gt := time.Unix(0, 0)

		if ts.Sub(gt) <= 0 || ts.Sub(lt) >= 0 {
			return TimestampGTLTValidationError{
				field:  "Val",
				reason: "value must be inside range (1970-01-01 00:00:00 +0000 UTC, 1970-01-01 00:00:01 +0000 UTC)",
			}
		}

	}

	return nil
}

// TimestampGTLTValidationError is the validation error returned by
// TimestampGTLT.Validate if the designated constraints aren't met.
type TimestampGTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTLTValidationError) ErrorName() string { return "TimestampGTLTValidationError" }

// Error satisfies the builtin error interface
func (e TimestampGTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTLTValidationError{}

// Validate checks the field values on TimestampExLTGT with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TimestampExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampExLTGTValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lt := time.Unix(0, 0)
		gt := time.Unix(1, 0)

		if ts.Sub(lt) >= 0 && ts.Sub(gt) <= 0 {
			return TimestampExLTGTValidationError{
				field:  "Val",
				reason: "value must be outside range [1970-01-01 00:00:00 +0000 UTC, 1970-01-01 00:00:01 +0000 UTC]",
			}
		}

	}

	return nil
}

// TimestampExLTGTValidationError is the validation error returned by
// TimestampExLTGT.Validate if the designated constraints aren't met.
type TimestampExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampExLTGTValidationError) ErrorName() string { return "TimestampExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e TimestampExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampExLTGTValidationError{}

// Validate checks the field values on TimestampGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TimestampGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTELTEValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lte := time.Unix(3600, 0)
		gte := time.Unix(60, 0)

		if ts.Sub(gte) < 0 || ts.Sub(lte) > 0 {
			return TimestampGTELTEValidationError{
				field:  "Val",
				reason: "value must be inside range [1970-01-01 00:01:00 +0000 UTC, 1970-01-01 01:00:00 +0000 UTC]",
			}
		}

	}

	return nil
}

// TimestampGTELTEValidationError is the validation error returned by
// TimestampGTELTE.Validate if the designated constraints aren't met.
type TimestampGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTELTEValidationError) ErrorName() string { return "TimestampGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e TimestampGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTELTEValidationError{}

// Validate checks the field values on TimestampExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TimestampExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampExGTELTEValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		lte := time.Unix(60, 0)
		gte := time.Unix(3600, 0)

		if ts.Sub(lte) > 0 && ts.Sub(gte) < 0 {
			return TimestampExGTELTEValidationError{
				field:  "Val",
				reason: "value must be outside range (1970-01-01 00:01:00 +0000 UTC, 1970-01-01 01:00:00 +0000 UTC)",
			}
		}

	}

	return nil
}

// TimestampExGTELTEValidationError is the validation error returned by
// TimestampExGTELTE.Validate if the designated constraints aren't met.
type TimestampExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampExGTELTEValidationError) ErrorName() string {
	return "TimestampExGTELTEValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampExGTELTEValidationError{}

// Validate checks the field values on TimestampLTNow with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampLTNow) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampLTNowValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()

		if ts.Sub(now) >= 0 {
			return TimestampLTNowValidationError{
				field:  "Val",
				reason: "value must be less than now",
			}
		}

	}

	return nil
}

// TimestampLTNowValidationError is the validation error returned by
// TimestampLTNow.Validate if the designated constraints aren't met.
type TimestampLTNowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampLTNowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampLTNowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampLTNowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampLTNowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampLTNowValidationError) ErrorName() string { return "TimestampLTNowValidationError" }

// Error satisfies the builtin error interface
func (e TimestampLTNowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampLTNow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampLTNowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampLTNowValidationError{}

// Validate checks the field values on TimestampGTNow with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TimestampGTNow) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTNowValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()

		if ts.Sub(now) <= 0 {
			return TimestampGTNowValidationError{
				field:  "Val",
				reason: "value must be greater than now",
			}
		}

	}

	return nil
}

// TimestampGTNowValidationError is the validation error returned by
// TimestampGTNow.Validate if the designated constraints aren't met.
type TimestampGTNowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTNowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTNowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTNowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTNowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTNowValidationError) ErrorName() string { return "TimestampGTNowValidationError" }

// Error satisfies the builtin error interface
func (e TimestampGTNowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGTNow.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTNowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTNowValidationError{}

// Validate checks the field values on TimestampWithin with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TimestampWithin) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampWithinValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(3600*time.Second + 0*time.Nanosecond)

		if ts.Sub(now.Add(within)) >= 0 || ts.Sub(now.Add(-within)) <= 0 {
			return TimestampWithinValidationError{
				field:  "Val",
				reason: "value must be within 1h0m0s of now",
			}
		}

	}

	return nil
}

// TimestampWithinValidationError is the validation error returned by
// TimestampWithin.Validate if the designated constraints aren't met.
type TimestampWithinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampWithinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampWithinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampWithinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampWithinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampWithinValidationError) ErrorName() string { return "TimestampWithinValidationError" }

// Error satisfies the builtin error interface
func (e TimestampWithinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampWithin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampWithinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampWithinValidationError{}

// Validate checks the field values on TimestampLTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TimestampLTNowWithin) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampLTNowWithinValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(3600*time.Second + 0*time.Nanosecond)

		if ts.Sub(now) >= 0 || ts.Sub(now.Add(-within)) < 0 {
			return TimestampLTNowWithinValidationError{
				field:  "Val",
				reason: "value must be less than now within 1h0m0s",
			}
		}

	}

	return nil
}

// TimestampLTNowWithinValidationError is the validation error returned by
// TimestampLTNowWithin.Validate if the designated constraints aren't met.
type TimestampLTNowWithinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampLTNowWithinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampLTNowWithinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampLTNowWithinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampLTNowWithinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampLTNowWithinValidationError) ErrorName() string {
	return "TimestampLTNowWithinValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampLTNowWithinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampLTNowWithin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampLTNowWithinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampLTNowWithinValidationError{}

// Validate checks the field values on TimestampGTNowWithin with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TimestampGTNowWithin) Validate() error {
	if m == nil {
		return nil
	}

	if t := m.GetVal(); t != nil {
		ts, err := ptypes.Timestamp(t)
		if err != nil {
			return TimestampGTNowWithinValidationError{
				field:  "Val",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
		}

		now := time.Now()
		within := time.Duration(3600*time.Second + 0*time.Nanosecond)

		if ts.Sub(now) <= 0 || ts.Sub(now.Add(within)) > 0 {
			return TimestampGTNowWithinValidationError{
				field:  "Val",
				reason: "value must be greater than now within 1h0m0s",
			}
		}

	}

	return nil
}

// TimestampGTNowWithinValidationError is the validation error returned by
// TimestampGTNowWithin.Validate if the designated constraints aren't met.
type TimestampGTNowWithinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimestampGTNowWithinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimestampGTNowWithinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimestampGTNowWithinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimestampGTNowWithinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimestampGTNowWithinValidationError) ErrorName() string {
	return "TimestampGTNowWithinValidationError"
}

// Error satisfies the builtin error interface
func (e TimestampGTNowWithinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimestampGTNowWithin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimestampGTNowWithinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimestampGTNowWithinValidationError{}
