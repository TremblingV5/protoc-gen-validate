// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_maps.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_maps_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MapNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapNone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// MapNoneValidationError is the validation error returned by MapNone.Validate
// if the designated constraints aren't met.
type MapNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapNoneValidationError) ErrorName() string { return "MapNoneValidationError" }

// Error satisfies the builtin error interface
func (e MapNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapNoneValidationError{}

// Validate checks the field values on MapMin with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapMin) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) < 2 {
		return MapMinValidationError{
			field:  "Val",
			reason: "value must contain at least 2 pair(s)",
		}
	}

	return nil
}

// MapMinValidationError is the validation error returned by MapMin.Validate if
// the designated constraints aren't met.
type MapMinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapMinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapMinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapMinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapMinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapMinValidationError) ErrorName() string { return "MapMinValidationError" }

// Error satisfies the builtin error interface
func (e MapMinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapMin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapMinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapMinValidationError{}

// Validate checks the field values on MapMax with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapMax) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) > 3 {
		return MapMaxValidationError{
			field:  "Val",
			reason: "value must not be more than 3 pair(s)",
		}
	}

	return nil
}

// MapMaxValidationError is the validation error returned by MapMax.Validate if
// the designated constraints aren't met.
type MapMaxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapMaxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapMaxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapMaxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapMaxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapMaxValidationError) ErrorName() string { return "MapMaxValidationError" }

// Error satisfies the builtin error interface
func (e MapMaxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapMax.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapMaxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapMaxValidationError{}

// Validate checks the field values on MapMinMax with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapMinMax) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetVal()); l < 2 || l > 4 {
		return MapMinMaxValidationError{
			field:  "Val",
			reason: "value must contain between 2 and 4 pairs, inclusive",
		}
	}

	return nil
}

// MapMinMaxValidationError is the validation error returned by
// MapMinMax.Validate if the designated constraints aren't met.
type MapMinMaxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapMinMaxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapMinMaxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapMinMaxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapMinMaxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapMinMaxValidationError) ErrorName() string { return "MapMinMaxValidationError" }

// Error satisfies the builtin error interface
func (e MapMinMaxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapMinMax.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapMinMaxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapMinMaxValidationError{}

// Validate checks the field values on MapExact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapExact) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetVal()) != 3 {
		return MapExactValidationError{
			field:  "Val",
			reason: "value must contain exactly 3 pair(s)",
		}
	}

	return nil
}

// MapExactValidationError is the validation error returned by
// MapExact.Validate if the designated constraints aren't met.
type MapExactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapExactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapExactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapExactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapExactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapExactValidationError) ErrorName() string { return "MapExactValidationError" }

// Error satisfies the builtin error interface
func (e MapExactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapExact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapExactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapExactValidationError{}

// Validate checks the field values on MapNoSparse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MapNoSparse) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		if val == nil {
			return MapNoSparseValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value cannot be sparse, all pairs must be non-nil",
			}
		}

		// no validation rules for Val[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapNoSparseValidationError{
					field:  fmt.Sprintf("Val[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MapNoSparseValidationError is the validation error returned by
// MapNoSparse.Validate if the designated constraints aren't met.
type MapNoSparseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapNoSparseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapNoSparseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapNoSparseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapNoSparseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapNoSparseValidationError) ErrorName() string { return "MapNoSparseValidationError" }

// Error satisfies the builtin error interface
func (e MapNoSparseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapNoSparse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapNoSparseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapNoSparseValidationError{}

// Validate checks the field values on MapKeys with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapKeys) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		if key >= 0 {
			return MapKeysValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value must be less than 0",
			}
		}

		// no validation rules for Val[key]
	}

	return nil
}

// MapKeysValidationError is the validation error returned by MapKeys.Validate
// if the designated constraints aren't met.
type MapKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapKeysValidationError) ErrorName() string { return "MapKeysValidationError" }

// Error satisfies the builtin error interface
func (e MapKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapKeysValidationError{}

// Validate checks the field values on MapValues with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MapValues) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		// no validation rules for Val[key]

		if utf8.RuneCountInString(val) < 3 {
			return MapValuesValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value length must be at least 3 runes",
			}
		}

	}

	return nil
}

// MapValuesValidationError is the validation error returned by
// MapValues.Validate if the designated constraints aren't met.
type MapValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapValuesValidationError) ErrorName() string { return "MapValuesValidationError" }

// Error satisfies the builtin error interface
func (e MapValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapValuesValidationError{}

// Validate checks the field values on MapKeysPattern with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MapKeysPattern) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		if !_MapKeysPattern_Val_Pattern.MatchString(key) {
			return MapKeysPatternValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value does not match regex pattern \"(?i)^[a-z0-9]+$\"",
			}
		}

		// no validation rules for Val[key]
	}

	return nil
}

// MapKeysPatternValidationError is the validation error returned by
// MapKeysPattern.Validate if the designated constraints aren't met.
type MapKeysPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapKeysPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapKeysPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapKeysPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapKeysPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapKeysPatternValidationError) ErrorName() string { return "MapKeysPatternValidationError" }

// Error satisfies the builtin error interface
func (e MapKeysPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapKeysPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapKeysPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapKeysPatternValidationError{}

var _MapKeysPattern_Val_Pattern = regexp.MustCompile("(?i)^[a-z0-9]+$")

// Validate checks the field values on MapValuesPattern with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MapValuesPattern) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		// no validation rules for Val[key]

		if !_MapValuesPattern_Val_Pattern.MatchString(val) {
			return MapValuesPatternValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value does not match regex pattern \"(?i)^[a-z0-9]+$\"",
			}
		}

	}

	return nil
}

// MapValuesPatternValidationError is the validation error returned by
// MapValuesPattern.Validate if the designated constraints aren't met.
type MapValuesPatternValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapValuesPatternValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapValuesPatternValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapValuesPatternValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapValuesPatternValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapValuesPatternValidationError) ErrorName() string { return "MapValuesPatternValidationError" }

// Error satisfies the builtin error interface
func (e MapValuesPatternValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapValuesPattern.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapValuesPatternValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapValuesPatternValidationError{}

var _MapValuesPattern_Val_Pattern = regexp.MustCompile("(?i)^[a-z0-9]+$")

// Validate checks the field values on MapRecursive with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MapRecursive) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		// no validation rules for Val[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapRecursiveValidationError{
					field:  fmt.Sprintf("Val[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MapRecursiveValidationError is the validation error returned by
// MapRecursive.Validate if the designated constraints aren't met.
type MapRecursiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapRecursiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapRecursiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapRecursiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapRecursiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapRecursiveValidationError) ErrorName() string { return "MapRecursiveValidationError" }

// Error satisfies the builtin error interface
func (e MapRecursiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapRecursive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapRecursiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapRecursiveValidationError{}

// Validate checks the field values on MapNoSparse_Msg with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MapNoSparse_Msg) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MapNoSparse_MsgValidationError is the validation error returned by
// MapNoSparse_Msg.Validate if the designated constraints aren't met.
type MapNoSparse_MsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapNoSparse_MsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapNoSparse_MsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapNoSparse_MsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapNoSparse_MsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapNoSparse_MsgValidationError) ErrorName() string { return "MapNoSparse_MsgValidationError" }

// Error satisfies the builtin error interface
func (e MapNoSparse_MsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapNoSparse_Msg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapNoSparse_MsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapNoSparse_MsgValidationError{}

// Validate checks the field values on MapRecursive_Msg with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MapRecursive_Msg) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetVal()) < 3 {
		return MapRecursive_MsgValidationError{
			field:  "Val",
			reason: "value length must be at least 3 runes",
		}
	}

	return nil
}

// MapRecursive_MsgValidationError is the validation error returned by
// MapRecursive_Msg.Validate if the designated constraints aren't met.
type MapRecursive_MsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapRecursive_MsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapRecursive_MsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapRecursive_MsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapRecursive_MsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapRecursive_MsgValidationError) ErrorName() string { return "MapRecursive_MsgValidationError" }

// Error satisfies the builtin error interface
func (e MapRecursive_MsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapRecursive_Msg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapRecursive_MsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapRecursive_MsgValidationError{}
