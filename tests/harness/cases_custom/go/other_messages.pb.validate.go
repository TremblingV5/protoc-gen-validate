// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_messages.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TestMsg with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TestMsg) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetConst() != "foo" {
		return TestMsgValidationError{
			field:  "Const",
			reason: "value must equal foo",
		}
	}

	if v, ok := interface{}(m.GetNested()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestMsgValidationError{
				field:  "Nested",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TestMsgValidationError is the validation error returned by TestMsg.Validate
// if the designated constraints aren't met.
type TestMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestMsgValidationError) ErrorName() string { return "TestMsgValidationError" }

// Error satisfies the builtin error interface
func (e TestMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestMsgValidationError{}

// Validate checks the field values on MessageNone with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MessageNone) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageNoneValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageNoneValidationError is the validation error returned by
// MessageNone.Validate if the designated constraints aren't met.
type MessageNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageNoneValidationError) ErrorName() string { return "MessageNoneValidationError" }

// Error satisfies the builtin error interface
func (e MessageNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageNoneValidationError{}

// Validate is disabled for MessageDisabled. This method will always return nil.
func (m *MessageDisabled) Validate() error {
	return nil
}

// MessageDisabledValidationError is the validation error returned by
// MessageDisabled.Validate if the designated constraints aren't met.
type MessageDisabledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageDisabledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageDisabledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageDisabledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageDisabledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageDisabledValidationError) ErrorName() string { return "MessageDisabledValidationError" }

// Error satisfies the builtin error interface
func (e MessageDisabledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageDisabled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageDisabledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageDisabledValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on MessageCrossPackage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MessageCrossPackage) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageCrossPackageValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageCrossPackageValidationError is the validation error returned by
// MessageCrossPackage.Validate if the designated constraints aren't met.
type MessageCrossPackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageCrossPackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageCrossPackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageCrossPackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageCrossPackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageCrossPackageValidationError) ErrorName() string {
	return "MessageCrossPackageValidationError"
}

// Error satisfies the builtin error interface
func (e MessageCrossPackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageCrossPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageCrossPackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageCrossPackageValidationError{}

// Validate checks the field values on MessageSkip with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MessageSkip) Validate() error {
	if m == nil {
		return nil
	}

	// skipping validation for val

	return nil
}

// MessageSkipValidationError is the validation error returned by
// MessageSkip.Validate if the designated constraints aren't met.
type MessageSkipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageSkipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageSkipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageSkipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageSkipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageSkipValidationError) ErrorName() string { return "MessageSkipValidationError" }

// Error satisfies the builtin error interface
func (e MessageSkipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageSkip.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageSkipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageSkipValidationError{}

// Validate checks the field values on MessageRequired with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MessageRequired) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() == nil {
		return MessageRequiredValidationError{
			field:  "Val",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageRequiredValidationError{
				field:  "Val",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MessageRequiredValidationError is the validation error returned by
// MessageRequired.Validate if the designated constraints aren't met.
type MessageRequiredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageRequiredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageRequiredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageRequiredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageRequiredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageRequiredValidationError) ErrorName() string { return "MessageRequiredValidationError" }

// Error satisfies the builtin error interface
func (e MessageRequiredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageRequired.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageRequiredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageRequiredValidationError{}

// Validate checks the field values on MessageWith3DInside with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MessageWith3DInside) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MessageWith3DInsideValidationError is the validation error returned by
// MessageWith3DInside.Validate if the designated constraints aren't met.
type MessageWith3DInsideValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageWith3DInsideValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageWith3DInsideValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageWith3DInsideValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageWith3DInsideValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageWith3DInsideValidationError) ErrorName() string {
	return "MessageWith3DInsideValidationError"
}

// Error satisfies the builtin error interface
func (e MessageWith3DInsideValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageWith3DInside.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageWith3DInsideValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageWith3DInsideValidationError{}

// Validate checks the field values on MessageNone_NoneMsg with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MessageNone_NoneMsg) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MessageNone_NoneMsgValidationError is the validation error returned by
// MessageNone_NoneMsg.Validate if the designated constraints aren't met.
type MessageNone_NoneMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageNone_NoneMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageNone_NoneMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageNone_NoneMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageNone_NoneMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageNone_NoneMsgValidationError) ErrorName() string {
	return "MessageNone_NoneMsgValidationError"
}

// Error satisfies the builtin error interface
func (e MessageNone_NoneMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageNone_NoneMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageNone_NoneMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageNone_NoneMsgValidationError{}
