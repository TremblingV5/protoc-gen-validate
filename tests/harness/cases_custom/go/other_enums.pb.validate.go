// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_enums.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

other_package_custom "github.com/envoyproxy/protoc-gen-validate/tests/harness/cases_custom/other_package_custom/go"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = other_package_custom.Embed_Enumerated(0)
)

// define the regex for a UUID once up-front
var _other_enums_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EnumNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnumNone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// EnumNoneValidationError is the validation error returned by
// EnumNone.Validate if the designated constraints aren't met.
type EnumNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumNoneValidationError) ErrorName() string { return "EnumNoneValidationError" }

// Error satisfies the builtin error interface
func (e EnumNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumNoneValidationError{}

// Validate checks the field values on EnumConst with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnumConst) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 2 {
		return EnumConstValidationError{
			field:  "Val",
			reason: "value must equal 2",
		}
	}

	return nil
}

// EnumConstValidationError is the validation error returned by
// EnumConst.Validate if the designated constraints aren't met.
type EnumConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumConstValidationError) ErrorName() string { return "EnumConstValidationError" }

// Error satisfies the builtin error interface
func (e EnumConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumConstValidationError{}

// Validate checks the field values on EnumAliasConst with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnumAliasConst) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 2 {
		return EnumAliasConstValidationError{
			field:  "Val",
			reason: "value must equal 2",
		}
	}

	return nil
}

// EnumAliasConstValidationError is the validation error returned by
// EnumAliasConst.Validate if the designated constraints aren't met.
type EnumAliasConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumAliasConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumAliasConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumAliasConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumAliasConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumAliasConstValidationError) ErrorName() string { return "EnumAliasConstValidationError" }

// Error satisfies the builtin error interface
func (e EnumAliasConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumAliasConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumAliasConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumAliasConstValidationError{}

// Validate checks the field values on EnumDefined with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnumDefined) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := TestEnum_name[int32(m.GetVal())]; !ok {
		return EnumDefinedValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// EnumDefinedValidationError is the validation error returned by
// EnumDefined.Validate if the designated constraints aren't met.
type EnumDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumDefinedValidationError) ErrorName() string { return "EnumDefinedValidationError" }

// Error satisfies the builtin error interface
func (e EnumDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumDefinedValidationError{}

// Validate checks the field values on EnumAliasDefined with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnumAliasDefined) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := TestEnumAlias_name[int32(m.GetVal())]; !ok {
		return EnumAliasDefinedValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// EnumAliasDefinedValidationError is the validation error returned by
// EnumAliasDefined.Validate if the designated constraints aren't met.
type EnumAliasDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumAliasDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumAliasDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumAliasDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumAliasDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumAliasDefinedValidationError) ErrorName() string { return "EnumAliasDefinedValidationError" }

// Error satisfies the builtin error interface
func (e EnumAliasDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumAliasDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumAliasDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumAliasDefinedValidationError{}

// Validate checks the field values on EnumIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnumIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _EnumIn_Val_InLookup[m.GetVal()]; !ok {
		return EnumInValidationError{
			field:  "Val",
			reason: "value must be in list [0 2]",
		}
	}

	return nil
}

// EnumInValidationError is the validation error returned by EnumIn.Validate if
// the designated constraints aren't met.
type EnumInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumInValidationError) ErrorName() string { return "EnumInValidationError" }

// Error satisfies the builtin error interface
func (e EnumInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumInValidationError{}

var _EnumIn_Val_InLookup = map[TestEnum]struct{}{
	0: {},
	2: {},
}

// Validate checks the field values on EnumAliasIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnumAliasIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _EnumAliasIn_Val_InLookup[m.GetVal()]; !ok {
		return EnumAliasInValidationError{
			field:  "Val",
			reason: "value must be in list [0 2]",
		}
	}

	return nil
}

// EnumAliasInValidationError is the validation error returned by
// EnumAliasIn.Validate if the designated constraints aren't met.
type EnumAliasInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumAliasInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumAliasInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumAliasInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumAliasInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumAliasInValidationError) ErrorName() string { return "EnumAliasInValidationError" }

// Error satisfies the builtin error interface
func (e EnumAliasInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumAliasIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumAliasInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumAliasInValidationError{}

var _EnumAliasIn_Val_InLookup = map[TestEnumAlias]struct{}{
	0: {},
	2: {},
}

// Validate checks the field values on EnumNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EnumNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _EnumNotIn_Val_NotInLookup[m.GetVal()]; ok {
		return EnumNotInValidationError{
			field:  "Val",
			reason: "value must not be in list [1]",
		}
	}

	return nil
}

// EnumNotInValidationError is the validation error returned by
// EnumNotIn.Validate if the designated constraints aren't met.
type EnumNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumNotInValidationError) ErrorName() string { return "EnumNotInValidationError" }

// Error satisfies the builtin error interface
func (e EnumNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumNotInValidationError{}

var _EnumNotIn_Val_NotInLookup = map[TestEnum]struct{}{
	1: {},
}

// Validate checks the field values on EnumAliasNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnumAliasNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _EnumAliasNotIn_Val_NotInLookup[m.GetVal()]; ok {
		return EnumAliasNotInValidationError{
			field:  "Val",
			reason: "value must not be in list [1]",
		}
	}

	return nil
}

// EnumAliasNotInValidationError is the validation error returned by
// EnumAliasNotIn.Validate if the designated constraints aren't met.
type EnumAliasNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumAliasNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumAliasNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumAliasNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumAliasNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumAliasNotInValidationError) ErrorName() string { return "EnumAliasNotInValidationError" }

// Error satisfies the builtin error interface
func (e EnumAliasNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumAliasNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumAliasNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumAliasNotInValidationError{}

var _EnumAliasNotIn_Val_NotInLookup = map[TestEnumAlias]struct{}{
	1: {},
}

// Validate checks the field values on EnumExternal with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnumExternal) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := other_package_custom.Embed_Enumerated_name[int32(m.GetVal())]; !ok {
		return EnumExternalValidationError{
			field:  "Val",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// EnumExternalValidationError is the validation error returned by
// EnumExternal.Validate if the designated constraints aren't met.
type EnumExternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumExternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumExternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumExternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumExternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumExternalValidationError) ErrorName() string { return "EnumExternalValidationError" }

// Error satisfies the builtin error interface
func (e EnumExternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumExternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumExternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumExternalValidationError{}

// Validate checks the field values on RepeatedEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedEnumDefined) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := TestEnum_name[int32(item)]; !ok {
			return RepeatedEnumDefinedValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// RepeatedEnumDefinedValidationError is the validation error returned by
// RepeatedEnumDefined.Validate if the designated constraints aren't met.
type RepeatedEnumDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedEnumDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedEnumDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedEnumDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedEnumDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedEnumDefinedValidationError) ErrorName() string {
	return "RepeatedEnumDefinedValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedEnumDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedEnumDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedEnumDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedEnumDefinedValidationError{}

// Validate checks the field values on RepeatedExternalEnumDefined with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RepeatedExternalEnumDefined) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetVal() {
		_, _ = idx, item

		if _, ok := other_package_custom.Embed_Enumerated_name[int32(item)]; !ok {
			return RepeatedExternalEnumDefinedValidationError{
				field:  fmt.Sprintf("Val[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// RepeatedExternalEnumDefinedValidationError is the validation error returned
// by RepeatedExternalEnumDefined.Validate if the designated constraints
// aren't met.
type RepeatedExternalEnumDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedExternalEnumDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedExternalEnumDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedExternalEnumDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedExternalEnumDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedExternalEnumDefinedValidationError) ErrorName() string {
	return "RepeatedExternalEnumDefinedValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedExternalEnumDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedExternalEnumDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedExternalEnumDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedExternalEnumDefinedValidationError{}

// Validate checks the field values on MapEnumDefined with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MapEnumDefined) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		// no validation rules for Val[key]

		if _, ok := TestEnum_name[int32(val)]; !ok {
			return MapEnumDefinedValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// MapEnumDefinedValidationError is the validation error returned by
// MapEnumDefined.Validate if the designated constraints aren't met.
type MapEnumDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapEnumDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapEnumDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapEnumDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapEnumDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapEnumDefinedValidationError) ErrorName() string { return "MapEnumDefinedValidationError" }

// Error satisfies the builtin error interface
func (e MapEnumDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapEnumDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapEnumDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapEnumDefinedValidationError{}

// Validate checks the field values on MapExternalEnumDefined with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MapExternalEnumDefined) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetVal() {
		_ = val

		// no validation rules for Val[key]

		if _, ok := other_package_custom.Embed_Enumerated_name[int32(val)]; !ok {
			return MapExternalEnumDefinedValidationError{
				field:  fmt.Sprintf("Val[%v]", key),
				reason: "value must be one of the defined enum values",
			}
		}

	}

	return nil
}

// MapExternalEnumDefinedValidationError is the validation error returned by
// MapExternalEnumDefined.Validate if the designated constraints aren't met.
type MapExternalEnumDefinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapExternalEnumDefinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapExternalEnumDefinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapExternalEnumDefinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapExternalEnumDefinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapExternalEnumDefinedValidationError) ErrorName() string {
	return "MapExternalEnumDefinedValidationError"
}

// Error satisfies the builtin error interface
func (e MapExternalEnumDefinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapExternalEnumDefined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapExternalEnumDefinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapExternalEnumDefinedValidationError{}
