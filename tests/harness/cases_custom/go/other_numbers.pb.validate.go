// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: other_numbers.proto

package cases_custom

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _other_numbers_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FloatNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatNone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// FloatNoneValidationError is the validation error returned by
// FloatNone.Validate if the designated constraints aren't met.
type FloatNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatNoneValidationError) ErrorName() string { return "FloatNoneValidationError" }

// Error satisfies the builtin error interface
func (e FloatNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatNoneValidationError{}

// Validate checks the field values on FloatConst with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatConst) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1.23 {
		return FloatConstValidationError{
			field:  "Val",
			reason: "value must equal 1.23",
		}
	}

	return nil
}

// FloatConstValidationError is the validation error returned by
// FloatConst.Validate if the designated constraints aren't met.
type FloatConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatConstValidationError) ErrorName() string { return "FloatConstValidationError" }

// Error satisfies the builtin error interface
func (e FloatConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatConstValidationError{}

// Validate checks the field values on FloatIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _FloatIn_Val_InLookup[m.GetVal()]; !ok {
		return FloatInValidationError{
			field:  "Val",
			reason: "value must be in list [4.56 7.89]",
		}
	}

	return nil
}

// FloatInValidationError is the validation error returned by FloatIn.Validate
// if the designated constraints aren't met.
type FloatInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatInValidationError) ErrorName() string { return "FloatInValidationError" }

// Error satisfies the builtin error interface
func (e FloatInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatInValidationError{}

var _FloatIn_Val_InLookup = map[float32]struct{}{
	4.56: {},
	7.89: {},
}

// Validate checks the field values on FloatNotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _FloatNotIn_Val_NotInLookup[m.GetVal()]; ok {
		return FloatNotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// FloatNotInValidationError is the validation error returned by
// FloatNotIn.Validate if the designated constraints aren't met.
type FloatNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatNotInValidationError) ErrorName() string { return "FloatNotInValidationError" }

// Error satisfies the builtin error interface
func (e FloatNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatNotInValidationError{}

var _FloatNotIn_Val_NotInLookup = map[float32]struct{}{
	0: {},
}

// Validate checks the field values on FloatLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatLT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return FloatLTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// FloatLTValidationError is the validation error returned by FloatLT.Validate
// if the designated constraints aren't met.
type FloatLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatLTValidationError) ErrorName() string { return "FloatLTValidationError" }

// Error satisfies the builtin error interface
func (e FloatLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatLTValidationError{}

// Validate checks the field values on FloatLTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatLTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return FloatLTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// FloatLTEValidationError is the validation error returned by
// FloatLTE.Validate if the designated constraints aren't met.
type FloatLTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatLTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatLTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatLTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatLTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatLTEValidationError) ErrorName() string { return "FloatLTEValidationError" }

// Error satisfies the builtin error interface
func (e FloatLTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatLTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatLTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatLTEValidationError{}

// Validate checks the field values on FloatGT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatGT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return FloatGTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// FloatGTValidationError is the validation error returned by FloatGT.Validate
// if the designated constraints aren't met.
type FloatGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatGTValidationError) ErrorName() string { return "FloatGTValidationError" }

// Error satisfies the builtin error interface
func (e FloatGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatGTValidationError{}

// Validate checks the field values on FloatGTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatGTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return FloatGTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// FloatGTEValidationError is the validation error returned by
// FloatGTE.Validate if the designated constraints aren't met.
type FloatGTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatGTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatGTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatGTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatGTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatGTEValidationError) ErrorName() string { return "FloatGTEValidationError" }

// Error satisfies the builtin error interface
func (e FloatGTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatGTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatGTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatGTEValidationError{}

// Validate checks the field values on FloatGTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FloatGTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return FloatGTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// FloatGTLTValidationError is the validation error returned by
// FloatGTLT.Validate if the designated constraints aren't met.
type FloatGTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatGTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatGTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatGTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatGTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatGTLTValidationError) ErrorName() string { return "FloatGTLTValidationError" }

// Error satisfies the builtin error interface
func (e FloatGTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatGTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatGTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatGTLTValidationError{}

// Validate checks the field values on FloatExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FloatExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return FloatExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// FloatExLTGTValidationError is the validation error returned by
// FloatExLTGT.Validate if the designated constraints aren't met.
type FloatExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatExLTGTValidationError) ErrorName() string { return "FloatExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e FloatExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatExLTGTValidationError{}

// Validate checks the field values on FloatGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FloatGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return FloatGTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// FloatGTELTEValidationError is the validation error returned by
// FloatGTELTE.Validate if the designated constraints aren't met.
type FloatGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatGTELTEValidationError) ErrorName() string { return "FloatGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e FloatGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatGTELTEValidationError{}

// Validate checks the field values on FloatExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FloatExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return FloatExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// FloatExGTELTEValidationError is the validation error returned by
// FloatExGTELTE.Validate if the designated constraints aren't met.
type FloatExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatExGTELTEValidationError) ErrorName() string { return "FloatExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e FloatExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatExGTELTEValidationError{}

// Validate checks the field values on DoubleNone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleNone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// DoubleNoneValidationError is the validation error returned by
// DoubleNone.Validate if the designated constraints aren't met.
type DoubleNoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleNoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleNoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleNoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleNoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleNoneValidationError) ErrorName() string { return "DoubleNoneValidationError" }

// Error satisfies the builtin error interface
func (e DoubleNoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleNone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleNoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleNoneValidationError{}

// Validate checks the field values on DoubleConst with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleConst) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1.23 {
		return DoubleConstValidationError{
			field:  "Val",
			reason: "value must equal 1.23",
		}
	}

	return nil
}

// DoubleConstValidationError is the validation error returned by
// DoubleConst.Validate if the designated constraints aren't met.
type DoubleConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleConstValidationError) ErrorName() string { return "DoubleConstValidationError" }

// Error satisfies the builtin error interface
func (e DoubleConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleConst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleConstValidationError{}

// Validate checks the field values on DoubleIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _DoubleIn_Val_InLookup[m.GetVal()]; !ok {
		return DoubleInValidationError{
			field:  "Val",
			reason: "value must be in list [4.56 7.89]",
		}
	}

	return nil
}

// DoubleInValidationError is the validation error returned by
// DoubleIn.Validate if the designated constraints aren't met.
type DoubleInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleInValidationError) ErrorName() string { return "DoubleInValidationError" }

// Error satisfies the builtin error interface
func (e DoubleInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleInValidationError{}

var _DoubleIn_Val_InLookup = map[float64]struct{}{
	4.56: {},
	7.89: {},
}

// Validate checks the field values on DoubleNotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleNotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _DoubleNotIn_Val_NotInLookup[m.GetVal()]; ok {
		return DoubleNotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// DoubleNotInValidationError is the validation error returned by
// DoubleNotIn.Validate if the designated constraints aren't met.
type DoubleNotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleNotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleNotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleNotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleNotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleNotInValidationError) ErrorName() string { return "DoubleNotInValidationError" }

// Error satisfies the builtin error interface
func (e DoubleNotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleNotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleNotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleNotInValidationError{}

var _DoubleNotIn_Val_NotInLookup = map[float64]struct{}{
	0: {},
}

// Validate checks the field values on DoubleLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleLT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return DoubleLTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// DoubleLTValidationError is the validation error returned by
// DoubleLT.Validate if the designated constraints aren't met.
type DoubleLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleLTValidationError) ErrorName() string { return "DoubleLTValidationError" }

// Error satisfies the builtin error interface
func (e DoubleLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleLTValidationError{}

// Validate checks the field values on DoubleLTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleLTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return DoubleLTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// DoubleLTEValidationError is the validation error returned by
// DoubleLTE.Validate if the designated constraints aren't met.
type DoubleLTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleLTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleLTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleLTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleLTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleLTEValidationError) ErrorName() string { return "DoubleLTEValidationError" }

// Error satisfies the builtin error interface
func (e DoubleLTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleLTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleLTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleLTEValidationError{}

// Validate checks the field values on DoubleGT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleGT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return DoubleGTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// DoubleGTValidationError is the validation error returned by
// DoubleGT.Validate if the designated constraints aren't met.
type DoubleGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleGTValidationError) ErrorName() string { return "DoubleGTValidationError" }

// Error satisfies the builtin error interface
func (e DoubleGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleGTValidationError{}

// Validate checks the field values on DoubleGTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleGTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return DoubleGTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// DoubleGTEValidationError is the validation error returned by
// DoubleGTE.Validate if the designated constraints aren't met.
type DoubleGTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleGTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleGTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleGTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleGTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleGTEValidationError) ErrorName() string { return "DoubleGTEValidationError" }

// Error satisfies the builtin error interface
func (e DoubleGTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleGTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleGTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleGTEValidationError{}

// Validate checks the field values on DoubleGTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DoubleGTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return DoubleGTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// DoubleGTLTValidationError is the validation error returned by
// DoubleGTLT.Validate if the designated constraints aren't met.
type DoubleGTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleGTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleGTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleGTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleGTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleGTLTValidationError) ErrorName() string { return "DoubleGTLTValidationError" }

// Error satisfies the builtin error interface
func (e DoubleGTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleGTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleGTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleGTLTValidationError{}

// Validate checks the field values on DoubleExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return DoubleExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// DoubleExLTGTValidationError is the validation error returned by
// DoubleExLTGT.Validate if the designated constraints aren't met.
type DoubleExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleExLTGTValidationError) ErrorName() string { return "DoubleExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e DoubleExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleExLTGTValidationError{}

// Validate checks the field values on DoubleGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return DoubleGTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// DoubleGTELTEValidationError is the validation error returned by
// DoubleGTELTE.Validate if the designated constraints aren't met.
type DoubleGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleGTELTEValidationError) ErrorName() string { return "DoubleGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e DoubleGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleGTELTEValidationError{}

// Validate checks the field values on DoubleExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DoubleExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return DoubleExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// DoubleExGTELTEValidationError is the validation error returned by
// DoubleExGTELTE.Validate if the designated constraints aren't met.
type DoubleExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleExGTELTEValidationError) ErrorName() string { return "DoubleExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e DoubleExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleExGTELTEValidationError{}

// Validate checks the field values on Int32None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// Int32NoneValidationError is the validation error returned by
// Int32None.Validate if the designated constraints aren't met.
type Int32NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32NoneValidationError) ErrorName() string { return "Int32NoneValidationError" }

// Error satisfies the builtin error interface
func (e Int32NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32NoneValidationError{}

// Validate checks the field values on Int32Const with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return Int32ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// Int32ConstValidationError is the validation error returned by
// Int32Const.Validate if the designated constraints aren't met.
type Int32ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32ConstValidationError) ErrorName() string { return "Int32ConstValidationError" }

// Error satisfies the builtin error interface
func (e Int32ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32ConstValidationError{}

// Validate checks the field values on Int32In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Int32In_Val_InLookup[m.GetVal()]; !ok {
		return Int32InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// Int32InValidationError is the validation error returned by Int32In.Validate
// if the designated constraints aren't met.
type Int32InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32InValidationError) ErrorName() string { return "Int32InValidationError" }

// Error satisfies the builtin error interface
func (e Int32InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32InValidationError{}

var _Int32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Int32NotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Int32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return Int32NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// Int32NotInValidationError is the validation error returned by
// Int32NotIn.Validate if the designated constraints aren't met.
type Int32NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32NotInValidationError) ErrorName() string { return "Int32NotInValidationError" }

// Error satisfies the builtin error interface
func (e Int32NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32NotInValidationError{}

var _Int32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on Int32LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return Int32LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// Int32LTValidationError is the validation error returned by Int32LT.Validate
// if the designated constraints aren't met.
type Int32LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32LTValidationError) ErrorName() string { return "Int32LTValidationError" }

// Error satisfies the builtin error interface
func (e Int32LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32LTValidationError{}

// Validate checks the field values on Int32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return Int32LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// Int32LTEValidationError is the validation error returned by
// Int32LTE.Validate if the designated constraints aren't met.
type Int32LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32LTEValidationError) ErrorName() string { return "Int32LTEValidationError" }

// Error satisfies the builtin error interface
func (e Int32LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32LTEValidationError{}

// Validate checks the field values on Int32GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return Int32GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// Int32GTValidationError is the validation error returned by Int32GT.Validate
// if the designated constraints aren't met.
type Int32GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32GTValidationError) ErrorName() string { return "Int32GTValidationError" }

// Error satisfies the builtin error interface
func (e Int32GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32GTValidationError{}

// Validate checks the field values on Int32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return Int32GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// Int32GTEValidationError is the validation error returned by
// Int32GTE.Validate if the designated constraints aren't met.
type Int32GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32GTEValidationError) ErrorName() string { return "Int32GTEValidationError" }

// Error satisfies the builtin error interface
func (e Int32GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32GTEValidationError{}

// Validate checks the field values on Int32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int32GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return Int32GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// Int32GTLTValidationError is the validation error returned by
// Int32GTLT.Validate if the designated constraints aren't met.
type Int32GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32GTLTValidationError) ErrorName() string { return "Int32GTLTValidationError" }

// Error satisfies the builtin error interface
func (e Int32GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32GTLTValidationError{}

// Validate checks the field values on Int32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int32ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return Int32ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// Int32ExLTGTValidationError is the validation error returned by
// Int32ExLTGT.Validate if the designated constraints aren't met.
type Int32ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32ExLTGTValidationError) ErrorName() string { return "Int32ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e Int32ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32ExLTGTValidationError{}

// Validate checks the field values on Int32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int32GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return Int32GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// Int32GTELTEValidationError is the validation error returned by
// Int32GTELTE.Validate if the designated constraints aren't met.
type Int32GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32GTELTEValidationError) ErrorName() string { return "Int32GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Int32GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32GTELTEValidationError{}

// Validate checks the field values on Int32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int32ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return Int32ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// Int32ExGTELTEValidationError is the validation error returned by
// Int32ExGTELTE.Validate if the designated constraints aren't met.
type Int32ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32ExGTELTEValidationError) ErrorName() string { return "Int32ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Int32ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32ExGTELTEValidationError{}

// Validate checks the field values on Int64None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// Int64NoneValidationError is the validation error returned by
// Int64None.Validate if the designated constraints aren't met.
type Int64NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64NoneValidationError) ErrorName() string { return "Int64NoneValidationError" }

// Error satisfies the builtin error interface
func (e Int64NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64NoneValidationError{}

// Validate checks the field values on Int64Const with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return Int64ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// Int64ConstValidationError is the validation error returned by
// Int64Const.Validate if the designated constraints aren't met.
type Int64ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ConstValidationError) ErrorName() string { return "Int64ConstValidationError" }

// Error satisfies the builtin error interface
func (e Int64ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ConstValidationError{}

// Validate checks the field values on Int64In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Int64In_Val_InLookup[m.GetVal()]; !ok {
		return Int64InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// Int64InValidationError is the validation error returned by Int64In.Validate
// if the designated constraints aren't met.
type Int64InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64InValidationError) ErrorName() string { return "Int64InValidationError" }

// Error satisfies the builtin error interface
func (e Int64InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64InValidationError{}

var _Int64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Int64NotIn with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Int64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return Int64NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// Int64NotInValidationError is the validation error returned by
// Int64NotIn.Validate if the designated constraints aren't met.
type Int64NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64NotInValidationError) ErrorName() string { return "Int64NotInValidationError" }

// Error satisfies the builtin error interface
func (e Int64NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64NotInValidationError{}

var _Int64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on Int64LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return Int64LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// Int64LTValidationError is the validation error returned by Int64LT.Validate
// if the designated constraints aren't met.
type Int64LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64LTValidationError) ErrorName() string { return "Int64LTValidationError" }

// Error satisfies the builtin error interface
func (e Int64LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64LTValidationError{}

// Validate checks the field values on Int64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return Int64LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// Int64LTEValidationError is the validation error returned by
// Int64LTE.Validate if the designated constraints aren't met.
type Int64LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64LTEValidationError) ErrorName() string { return "Int64LTEValidationError" }

// Error satisfies the builtin error interface
func (e Int64LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64LTEValidationError{}

// Validate checks the field values on Int64GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return Int64GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// Int64GTValidationError is the validation error returned by Int64GT.Validate
// if the designated constraints aren't met.
type Int64GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64GTValidationError) ErrorName() string { return "Int64GTValidationError" }

// Error satisfies the builtin error interface
func (e Int64GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64GTValidationError{}

// Validate checks the field values on Int64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return Int64GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// Int64GTEValidationError is the validation error returned by
// Int64GTE.Validate if the designated constraints aren't met.
type Int64GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64GTEValidationError) ErrorName() string { return "Int64GTEValidationError" }

// Error satisfies the builtin error interface
func (e Int64GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64GTEValidationError{}

// Validate checks the field values on Int64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Int64GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return Int64GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// Int64GTLTValidationError is the validation error returned by
// Int64GTLT.Validate if the designated constraints aren't met.
type Int64GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64GTLTValidationError) ErrorName() string { return "Int64GTLTValidationError" }

// Error satisfies the builtin error interface
func (e Int64GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64GTLTValidationError{}

// Validate checks the field values on Int64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int64ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return Int64ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// Int64ExLTGTValidationError is the validation error returned by
// Int64ExLTGT.Validate if the designated constraints aren't met.
type Int64ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ExLTGTValidationError) ErrorName() string { return "Int64ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e Int64ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ExLTGTValidationError{}

// Validate checks the field values on Int64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int64GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return Int64GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// Int64GTELTEValidationError is the validation error returned by
// Int64GTELTE.Validate if the designated constraints aren't met.
type Int64GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64GTELTEValidationError) ErrorName() string { return "Int64GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Int64GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64GTELTEValidationError{}

// Validate checks the field values on Int64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Int64ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return Int64ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// Int64ExGTELTEValidationError is the validation error returned by
// Int64ExGTELTE.Validate if the designated constraints aren't met.
type Int64ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64ExGTELTEValidationError) ErrorName() string { return "Int64ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Int64ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64ExGTELTEValidationError{}

// Validate checks the field values on UInt32None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// UInt32NoneValidationError is the validation error returned by
// UInt32None.Validate if the designated constraints aren't met.
type UInt32NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32NoneValidationError) ErrorName() string { return "UInt32NoneValidationError" }

// Error satisfies the builtin error interface
func (e UInt32NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32NoneValidationError{}

// Validate checks the field values on UInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt32Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return UInt32ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// UInt32ConstValidationError is the validation error returned by
// UInt32Const.Validate if the designated constraints aren't met.
type UInt32ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32ConstValidationError) ErrorName() string { return "UInt32ConstValidationError" }

// Error satisfies the builtin error interface
func (e UInt32ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32ConstValidationError{}

// Validate checks the field values on UInt32In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UInt32In_Val_InLookup[m.GetVal()]; !ok {
		return UInt32InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// UInt32InValidationError is the validation error returned by
// UInt32In.Validate if the designated constraints aren't met.
type UInt32InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32InValidationError) ErrorName() string { return "UInt32InValidationError" }

// Error satisfies the builtin error interface
func (e UInt32InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32InValidationError{}

var _UInt32In_Val_InLookup = map[uint32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on UInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt32NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UInt32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return UInt32NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// UInt32NotInValidationError is the validation error returned by
// UInt32NotIn.Validate if the designated constraints aren't met.
type UInt32NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32NotInValidationError) ErrorName() string { return "UInt32NotInValidationError" }

// Error satisfies the builtin error interface
func (e UInt32NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32NotInValidationError{}

var _UInt32NotIn_Val_NotInLookup = map[uint32]struct{}{
	0: {},
}

// Validate checks the field values on UInt32LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 5 {
		return UInt32LTValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
	}

	return nil
}

// UInt32LTValidationError is the validation error returned by
// UInt32LT.Validate if the designated constraints aren't met.
type UInt32LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32LTValidationError) ErrorName() string { return "UInt32LTValidationError" }

// Error satisfies the builtin error interface
func (e UInt32LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32LTValidationError{}

// Validate checks the field values on UInt32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return UInt32LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// UInt32LTEValidationError is the validation error returned by
// UInt32LTE.Validate if the designated constraints aren't met.
type UInt32LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32LTEValidationError) ErrorName() string { return "UInt32LTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt32LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32LTEValidationError{}

// Validate checks the field values on UInt32GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return UInt32GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// UInt32GTValidationError is the validation error returned by
// UInt32GT.Validate if the designated constraints aren't met.
type UInt32GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32GTValidationError) ErrorName() string { return "UInt32GTValidationError" }

// Error satisfies the builtin error interface
func (e UInt32GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32GTValidationError{}

// Validate checks the field values on UInt32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return UInt32GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// UInt32GTEValidationError is the validation error returned by
// UInt32GTE.Validate if the designated constraints aren't met.
type UInt32GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32GTEValidationError) ErrorName() string { return "UInt32GTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt32GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32GTEValidationError{}

// Validate checks the field values on UInt32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt32GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 5 || val >= 10 {
		return UInt32GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
	}

	return nil
}

// UInt32GTLTValidationError is the validation error returned by
// UInt32GTLT.Validate if the designated constraints aren't met.
type UInt32GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32GTLTValidationError) ErrorName() string { return "UInt32GTLTValidationError" }

// Error satisfies the builtin error interface
func (e UInt32GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32GTLTValidationError{}

// Validate checks the field values on UInt32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt32ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 5 && val <= 10 {
		return UInt32ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
	}

	return nil
}

// UInt32ExLTGTValidationError is the validation error returned by
// UInt32ExLTGT.Validate if the designated constraints aren't met.
type UInt32ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32ExLTGTValidationError) ErrorName() string { return "UInt32ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e UInt32ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32ExLTGTValidationError{}

// Validate checks the field values on UInt32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt32GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return UInt32GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// UInt32GTELTEValidationError is the validation error returned by
// UInt32GTELTE.Validate if the designated constraints aren't met.
type UInt32GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32GTELTEValidationError) ErrorName() string { return "UInt32GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt32GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32GTELTEValidationError{}

// Validate checks the field values on UInt32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt32ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return UInt32ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// UInt32ExGTELTEValidationError is the validation error returned by
// UInt32ExGTELTE.Validate if the designated constraints aren't met.
type UInt32ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt32ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt32ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt32ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt32ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt32ExGTELTEValidationError) ErrorName() string { return "UInt32ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt32ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt32ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt32ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt32ExGTELTEValidationError{}

// Validate checks the field values on UInt64None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// UInt64NoneValidationError is the validation error returned by
// UInt64None.Validate if the designated constraints aren't met.
type UInt64NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64NoneValidationError) ErrorName() string { return "UInt64NoneValidationError" }

// Error satisfies the builtin error interface
func (e UInt64NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64NoneValidationError{}

// Validate checks the field values on UInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt64Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return UInt64ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// UInt64ConstValidationError is the validation error returned by
// UInt64Const.Validate if the designated constraints aren't met.
type UInt64ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64ConstValidationError) ErrorName() string { return "UInt64ConstValidationError" }

// Error satisfies the builtin error interface
func (e UInt64ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64ConstValidationError{}

// Validate checks the field values on UInt64In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UInt64In_Val_InLookup[m.GetVal()]; !ok {
		return UInt64InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// UInt64InValidationError is the validation error returned by
// UInt64In.Validate if the designated constraints aren't met.
type UInt64InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64InValidationError) ErrorName() string { return "UInt64InValidationError" }

// Error satisfies the builtin error interface
func (e UInt64InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64InValidationError{}

var _UInt64In_Val_InLookup = map[uint64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on UInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt64NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UInt64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return UInt64NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// UInt64NotInValidationError is the validation error returned by
// UInt64NotIn.Validate if the designated constraints aren't met.
type UInt64NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64NotInValidationError) ErrorName() string { return "UInt64NotInValidationError" }

// Error satisfies the builtin error interface
func (e UInt64NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64NotInValidationError{}

var _UInt64NotIn_Val_NotInLookup = map[uint64]struct{}{
	0: {},
}

// Validate checks the field values on UInt64LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 5 {
		return UInt64LTValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
	}

	return nil
}

// UInt64LTValidationError is the validation error returned by
// UInt64LT.Validate if the designated constraints aren't met.
type UInt64LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64LTValidationError) ErrorName() string { return "UInt64LTValidationError" }

// Error satisfies the builtin error interface
func (e UInt64LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64LTValidationError{}

// Validate checks the field values on UInt64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return UInt64LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// UInt64LTEValidationError is the validation error returned by
// UInt64LTE.Validate if the designated constraints aren't met.
type UInt64LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64LTEValidationError) ErrorName() string { return "UInt64LTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt64LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64LTEValidationError{}

// Validate checks the field values on UInt64GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return UInt64GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// UInt64GTValidationError is the validation error returned by
// UInt64GT.Validate if the designated constraints aren't met.
type UInt64GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64GTValidationError) ErrorName() string { return "UInt64GTValidationError" }

// Error satisfies the builtin error interface
func (e UInt64GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64GTValidationError{}

// Validate checks the field values on UInt64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return UInt64GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// UInt64GTEValidationError is the validation error returned by
// UInt64GTE.Validate if the designated constraints aren't met.
type UInt64GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64GTEValidationError) ErrorName() string { return "UInt64GTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt64GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64GTEValidationError{}

// Validate checks the field values on UInt64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UInt64GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 5 || val >= 10 {
		return UInt64GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
	}

	return nil
}

// UInt64GTLTValidationError is the validation error returned by
// UInt64GTLT.Validate if the designated constraints aren't met.
type UInt64GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64GTLTValidationError) ErrorName() string { return "UInt64GTLTValidationError" }

// Error satisfies the builtin error interface
func (e UInt64GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64GTLTValidationError{}

// Validate checks the field values on UInt64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt64ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 5 && val <= 10 {
		return UInt64ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
	}

	return nil
}

// UInt64ExLTGTValidationError is the validation error returned by
// UInt64ExLTGT.Validate if the designated constraints aren't met.
type UInt64ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64ExLTGTValidationError) ErrorName() string { return "UInt64ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e UInt64ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64ExLTGTValidationError{}

// Validate checks the field values on UInt64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt64GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return UInt64GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// UInt64GTELTEValidationError is the validation error returned by
// UInt64GTELTE.Validate if the designated constraints aren't met.
type UInt64GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64GTELTEValidationError) ErrorName() string { return "UInt64GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt64GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64GTELTEValidationError{}

// Validate checks the field values on UInt64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UInt64ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return UInt64ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// UInt64ExGTELTEValidationError is the validation error returned by
// UInt64ExGTELTE.Validate if the designated constraints aren't met.
type UInt64ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UInt64ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UInt64ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UInt64ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UInt64ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UInt64ExGTELTEValidationError) ErrorName() string { return "UInt64ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e UInt64ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUInt64ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UInt64ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UInt64ExGTELTEValidationError{}

// Validate checks the field values on SInt32None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// SInt32NoneValidationError is the validation error returned by
// SInt32None.Validate if the designated constraints aren't met.
type SInt32NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32NoneValidationError) ErrorName() string { return "SInt32NoneValidationError" }

// Error satisfies the builtin error interface
func (e SInt32NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32NoneValidationError{}

// Validate checks the field values on SInt32Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt32Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return SInt32ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// SInt32ConstValidationError is the validation error returned by
// SInt32Const.Validate if the designated constraints aren't met.
type SInt32ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32ConstValidationError) ErrorName() string { return "SInt32ConstValidationError" }

// Error satisfies the builtin error interface
func (e SInt32ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32ConstValidationError{}

// Validate checks the field values on SInt32In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SInt32In_Val_InLookup[m.GetVal()]; !ok {
		return SInt32InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// SInt32InValidationError is the validation error returned by
// SInt32In.Validate if the designated constraints aren't met.
type SInt32InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32InValidationError) ErrorName() string { return "SInt32InValidationError" }

// Error satisfies the builtin error interface
func (e SInt32InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32InValidationError{}

var _SInt32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SInt32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt32NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SInt32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return SInt32NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// SInt32NotInValidationError is the validation error returned by
// SInt32NotIn.Validate if the designated constraints aren't met.
type SInt32NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32NotInValidationError) ErrorName() string { return "SInt32NotInValidationError" }

// Error satisfies the builtin error interface
func (e SInt32NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32NotInValidationError{}

var _SInt32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on SInt32LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return SInt32LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// SInt32LTValidationError is the validation error returned by
// SInt32LT.Validate if the designated constraints aren't met.
type SInt32LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32LTValidationError) ErrorName() string { return "SInt32LTValidationError" }

// Error satisfies the builtin error interface
func (e SInt32LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32LTValidationError{}

// Validate checks the field values on SInt32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return SInt32LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// SInt32LTEValidationError is the validation error returned by
// SInt32LTE.Validate if the designated constraints aren't met.
type SInt32LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32LTEValidationError) ErrorName() string { return "SInt32LTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt32LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32LTEValidationError{}

// Validate checks the field values on SInt32GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return SInt32GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// SInt32GTValidationError is the validation error returned by
// SInt32GT.Validate if the designated constraints aren't met.
type SInt32GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32GTValidationError) ErrorName() string { return "SInt32GTValidationError" }

// Error satisfies the builtin error interface
func (e SInt32GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32GTValidationError{}

// Validate checks the field values on SInt32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return SInt32GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// SInt32GTEValidationError is the validation error returned by
// SInt32GTE.Validate if the designated constraints aren't met.
type SInt32GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32GTEValidationError) ErrorName() string { return "SInt32GTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt32GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32GTEValidationError{}

// Validate checks the field values on SInt32GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt32GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return SInt32GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// SInt32GTLTValidationError is the validation error returned by
// SInt32GTLT.Validate if the designated constraints aren't met.
type SInt32GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32GTLTValidationError) ErrorName() string { return "SInt32GTLTValidationError" }

// Error satisfies the builtin error interface
func (e SInt32GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32GTLTValidationError{}

// Validate checks the field values on SInt32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt32ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return SInt32ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// SInt32ExLTGTValidationError is the validation error returned by
// SInt32ExLTGT.Validate if the designated constraints aren't met.
type SInt32ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32ExLTGTValidationError) ErrorName() string { return "SInt32ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e SInt32ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32ExLTGTValidationError{}

// Validate checks the field values on SInt32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt32GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return SInt32GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// SInt32GTELTEValidationError is the validation error returned by
// SInt32GTELTE.Validate if the designated constraints aren't met.
type SInt32GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32GTELTEValidationError) ErrorName() string { return "SInt32GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt32GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32GTELTEValidationError{}

// Validate checks the field values on SInt32ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt32ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return SInt32ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// SInt32ExGTELTEValidationError is the validation error returned by
// SInt32ExGTELTE.Validate if the designated constraints aren't met.
type SInt32ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt32ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt32ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt32ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt32ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt32ExGTELTEValidationError) ErrorName() string { return "SInt32ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt32ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt32ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt32ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt32ExGTELTEValidationError{}

// Validate checks the field values on SInt64None with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// SInt64NoneValidationError is the validation error returned by
// SInt64None.Validate if the designated constraints aren't met.
type SInt64NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64NoneValidationError) ErrorName() string { return "SInt64NoneValidationError" }

// Error satisfies the builtin error interface
func (e SInt64NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64NoneValidationError{}

// Validate checks the field values on SInt64Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt64Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return SInt64ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// SInt64ConstValidationError is the validation error returned by
// SInt64Const.Validate if the designated constraints aren't met.
type SInt64ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64ConstValidationError) ErrorName() string { return "SInt64ConstValidationError" }

// Error satisfies the builtin error interface
func (e SInt64ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64ConstValidationError{}

// Validate checks the field values on SInt64In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SInt64In_Val_InLookup[m.GetVal()]; !ok {
		return SInt64InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// SInt64InValidationError is the validation error returned by
// SInt64In.Validate if the designated constraints aren't met.
type SInt64InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64InValidationError) ErrorName() string { return "SInt64InValidationError" }

// Error satisfies the builtin error interface
func (e SInt64InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64InValidationError{}

var _SInt64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SInt64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt64NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SInt64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return SInt64NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// SInt64NotInValidationError is the validation error returned by
// SInt64NotIn.Validate if the designated constraints aren't met.
type SInt64NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64NotInValidationError) ErrorName() string { return "SInt64NotInValidationError" }

// Error satisfies the builtin error interface
func (e SInt64NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64NotInValidationError{}

var _SInt64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on SInt64LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return SInt64LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// SInt64LTValidationError is the validation error returned by
// SInt64LT.Validate if the designated constraints aren't met.
type SInt64LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64LTValidationError) ErrorName() string { return "SInt64LTValidationError" }

// Error satisfies the builtin error interface
func (e SInt64LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64LTValidationError{}

// Validate checks the field values on SInt64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return SInt64LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// SInt64LTEValidationError is the validation error returned by
// SInt64LTE.Validate if the designated constraints aren't met.
type SInt64LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64LTEValidationError) ErrorName() string { return "SInt64LTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt64LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64LTEValidationError{}

// Validate checks the field values on SInt64GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return SInt64GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// SInt64GTValidationError is the validation error returned by
// SInt64GT.Validate if the designated constraints aren't met.
type SInt64GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64GTValidationError) ErrorName() string { return "SInt64GTValidationError" }

// Error satisfies the builtin error interface
func (e SInt64GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64GTValidationError{}

// Validate checks the field values on SInt64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return SInt64GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// SInt64GTEValidationError is the validation error returned by
// SInt64GTE.Validate if the designated constraints aren't met.
type SInt64GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64GTEValidationError) ErrorName() string { return "SInt64GTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt64GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64GTEValidationError{}

// Validate checks the field values on SInt64GTLT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SInt64GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return SInt64GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// SInt64GTLTValidationError is the validation error returned by
// SInt64GTLT.Validate if the designated constraints aren't met.
type SInt64GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64GTLTValidationError) ErrorName() string { return "SInt64GTLTValidationError" }

// Error satisfies the builtin error interface
func (e SInt64GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64GTLTValidationError{}

// Validate checks the field values on SInt64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt64ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return SInt64ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// SInt64ExLTGTValidationError is the validation error returned by
// SInt64ExLTGT.Validate if the designated constraints aren't met.
type SInt64ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64ExLTGTValidationError) ErrorName() string { return "SInt64ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e SInt64ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64ExLTGTValidationError{}

// Validate checks the field values on SInt64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt64GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return SInt64GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// SInt64GTELTEValidationError is the validation error returned by
// SInt64GTELTE.Validate if the designated constraints aren't met.
type SInt64GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64GTELTEValidationError) ErrorName() string { return "SInt64GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt64GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64GTELTEValidationError{}

// Validate checks the field values on SInt64ExGTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SInt64ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return SInt64ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// SInt64ExGTELTEValidationError is the validation error returned by
// SInt64ExGTELTE.Validate if the designated constraints aren't met.
type SInt64ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SInt64ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SInt64ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SInt64ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SInt64ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SInt64ExGTELTEValidationError) ErrorName() string { return "SInt64ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SInt64ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSInt64ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SInt64ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SInt64ExGTELTEValidationError{}

// Validate checks the field values on Fixed32None with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// Fixed32NoneValidationError is the validation error returned by
// Fixed32None.Validate if the designated constraints aren't met.
type Fixed32NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32NoneValidationError) ErrorName() string { return "Fixed32NoneValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32NoneValidationError{}

// Validate checks the field values on Fixed32Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return Fixed32ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// Fixed32ConstValidationError is the validation error returned by
// Fixed32Const.Validate if the designated constraints aren't met.
type Fixed32ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32ConstValidationError) ErrorName() string { return "Fixed32ConstValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32ConstValidationError{}

// Validate checks the field values on Fixed32In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed32In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Fixed32In_Val_InLookup[m.GetVal()]; !ok {
		return Fixed32InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// Fixed32InValidationError is the validation error returned by
// Fixed32In.Validate if the designated constraints aren't met.
type Fixed32InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32InValidationError) ErrorName() string { return "Fixed32InValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32InValidationError{}

var _Fixed32In_Val_InLookup = map[uint32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Fixed32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Fixed32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return Fixed32NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// Fixed32NotInValidationError is the validation error returned by
// Fixed32NotIn.Validate if the designated constraints aren't met.
type Fixed32NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32NotInValidationError) ErrorName() string { return "Fixed32NotInValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32NotInValidationError{}

var _Fixed32NotIn_Val_NotInLookup = map[uint32]struct{}{
	0: {},
}

// Validate checks the field values on Fixed32LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed32LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 5 {
		return Fixed32LTValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
	}

	return nil
}

// Fixed32LTValidationError is the validation error returned by
// Fixed32LT.Validate if the designated constraints aren't met.
type Fixed32LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32LTValidationError) ErrorName() string { return "Fixed32LTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32LTValidationError{}

// Validate checks the field values on Fixed32LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed32LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return Fixed32LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// Fixed32LTEValidationError is the validation error returned by
// Fixed32LTE.Validate if the designated constraints aren't met.
type Fixed32LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32LTEValidationError) ErrorName() string { return "Fixed32LTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32LTEValidationError{}

// Validate checks the field values on Fixed32GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed32GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return Fixed32GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// Fixed32GTValidationError is the validation error returned by
// Fixed32GT.Validate if the designated constraints aren't met.
type Fixed32GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32GTValidationError) ErrorName() string { return "Fixed32GTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32GTValidationError{}

// Validate checks the field values on Fixed32GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed32GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return Fixed32GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// Fixed32GTEValidationError is the validation error returned by
// Fixed32GTE.Validate if the designated constraints aren't met.
type Fixed32GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32GTEValidationError) ErrorName() string { return "Fixed32GTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32GTEValidationError{}

// Validate checks the field values on Fixed32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 5 || val >= 10 {
		return Fixed32GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
	}

	return nil
}

// Fixed32GTLTValidationError is the validation error returned by
// Fixed32GTLT.Validate if the designated constraints aren't met.
type Fixed32GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32GTLTValidationError) ErrorName() string { return "Fixed32GTLTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32GTLTValidationError{}

// Validate checks the field values on Fixed32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 5 && val <= 10 {
		return Fixed32ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
	}

	return nil
}

// Fixed32ExLTGTValidationError is the validation error returned by
// Fixed32ExLTGT.Validate if the designated constraints aren't met.
type Fixed32ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32ExLTGTValidationError) ErrorName() string { return "Fixed32ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32ExLTGTValidationError{}

// Validate checks the field values on Fixed32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed32GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return Fixed32GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// Fixed32GTELTEValidationError is the validation error returned by
// Fixed32GTELTE.Validate if the designated constraints aren't met.
type Fixed32GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32GTELTEValidationError) ErrorName() string { return "Fixed32GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32GTELTEValidationError{}

// Validate checks the field values on Fixed32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Fixed32ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return Fixed32ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// Fixed32ExGTELTEValidationError is the validation error returned by
// Fixed32ExGTELTE.Validate if the designated constraints aren't met.
type Fixed32ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed32ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed32ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed32ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed32ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed32ExGTELTEValidationError) ErrorName() string { return "Fixed32ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed32ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed32ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed32ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed32ExGTELTEValidationError{}

// Validate checks the field values on Fixed64None with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// Fixed64NoneValidationError is the validation error returned by
// Fixed64None.Validate if the designated constraints aren't met.
type Fixed64NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64NoneValidationError) ErrorName() string { return "Fixed64NoneValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64NoneValidationError{}

// Validate checks the field values on Fixed64Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return Fixed64ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// Fixed64ConstValidationError is the validation error returned by
// Fixed64Const.Validate if the designated constraints aren't met.
type Fixed64ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64ConstValidationError) ErrorName() string { return "Fixed64ConstValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64ConstValidationError{}

// Validate checks the field values on Fixed64In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed64In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Fixed64In_Val_InLookup[m.GetVal()]; !ok {
		return Fixed64InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// Fixed64InValidationError is the validation error returned by
// Fixed64In.Validate if the designated constraints aren't met.
type Fixed64InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64InValidationError) ErrorName() string { return "Fixed64InValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64InValidationError{}

var _Fixed64In_Val_InLookup = map[uint64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on Fixed64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _Fixed64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return Fixed64NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// Fixed64NotInValidationError is the validation error returned by
// Fixed64NotIn.Validate if the designated constraints aren't met.
type Fixed64NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64NotInValidationError) ErrorName() string { return "Fixed64NotInValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64NotInValidationError{}

var _Fixed64NotIn_Val_NotInLookup = map[uint64]struct{}{
	0: {},
}

// Validate checks the field values on Fixed64LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed64LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 5 {
		return Fixed64LTValidationError{
			field:  "Val",
			reason: "value must be less than 5",
		}
	}

	return nil
}

// Fixed64LTValidationError is the validation error returned by
// Fixed64LT.Validate if the designated constraints aren't met.
type Fixed64LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64LTValidationError) ErrorName() string { return "Fixed64LTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64LTValidationError{}

// Validate checks the field values on Fixed64LTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed64LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return Fixed64LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// Fixed64LTEValidationError is the validation error returned by
// Fixed64LTE.Validate if the designated constraints aren't met.
type Fixed64LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64LTEValidationError) ErrorName() string { return "Fixed64LTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64LTEValidationError{}

// Validate checks the field values on Fixed64GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed64GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return Fixed64GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// Fixed64GTValidationError is the validation error returned by
// Fixed64GT.Validate if the designated constraints aren't met.
type Fixed64GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64GTValidationError) ErrorName() string { return "Fixed64GTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64GTValidationError{}

// Validate checks the field values on Fixed64GTE with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Fixed64GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return Fixed64GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// Fixed64GTEValidationError is the validation error returned by
// Fixed64GTE.Validate if the designated constraints aren't met.
type Fixed64GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64GTEValidationError) ErrorName() string { return "Fixed64GTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64GTEValidationError{}

// Validate checks the field values on Fixed64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 5 || val >= 10 {
		return Fixed64GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (5, 10)",
		}
	}

	return nil
}

// Fixed64GTLTValidationError is the validation error returned by
// Fixed64GTLT.Validate if the designated constraints aren't met.
type Fixed64GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64GTLTValidationError) ErrorName() string { return "Fixed64GTLTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64GTLTValidationError{}

// Validate checks the field values on Fixed64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 5 && val <= 10 {
		return Fixed64ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [5, 10]",
		}
	}

	return nil
}

// Fixed64ExLTGTValidationError is the validation error returned by
// Fixed64ExLTGT.Validate if the designated constraints aren't met.
type Fixed64ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64ExLTGTValidationError) ErrorName() string { return "Fixed64ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64ExLTGTValidationError{}

// Validate checks the field values on Fixed64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Fixed64GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return Fixed64GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// Fixed64GTELTEValidationError is the validation error returned by
// Fixed64GTELTE.Validate if the designated constraints aren't met.
type Fixed64GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64GTELTEValidationError) ErrorName() string { return "Fixed64GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64GTELTEValidationError{}

// Validate checks the field values on Fixed64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Fixed64ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return Fixed64ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// Fixed64ExGTELTEValidationError is the validation error returned by
// Fixed64ExGTELTE.Validate if the designated constraints aren't met.
type Fixed64ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Fixed64ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Fixed64ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Fixed64ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Fixed64ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Fixed64ExGTELTEValidationError) ErrorName() string { return "Fixed64ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e Fixed64ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFixed64ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Fixed64ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Fixed64ExGTELTEValidationError{}

// Validate checks the field values on SFixed32None with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// SFixed32NoneValidationError is the validation error returned by
// SFixed32None.Validate if the designated constraints aren't met.
type SFixed32NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32NoneValidationError) ErrorName() string { return "SFixed32NoneValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32NoneValidationError{}

// Validate checks the field values on SFixed32Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return SFixed32ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// SFixed32ConstValidationError is the validation error returned by
// SFixed32Const.Validate if the designated constraints aren't met.
type SFixed32ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32ConstValidationError) ErrorName() string { return "SFixed32ConstValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32ConstValidationError{}

// Validate checks the field values on SFixed32In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed32In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SFixed32In_Val_InLookup[m.GetVal()]; !ok {
		return SFixed32InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// SFixed32InValidationError is the validation error returned by
// SFixed32In.Validate if the designated constraints aren't met.
type SFixed32InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32InValidationError) ErrorName() string { return "SFixed32InValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32InValidationError{}

var _SFixed32In_Val_InLookup = map[int32]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SFixed32NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SFixed32NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return SFixed32NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// SFixed32NotInValidationError is the validation error returned by
// SFixed32NotIn.Validate if the designated constraints aren't met.
type SFixed32NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32NotInValidationError) ErrorName() string { return "SFixed32NotInValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32NotInValidationError{}

var _SFixed32NotIn_Val_NotInLookup = map[int32]struct{}{
	0: {},
}

// Validate checks the field values on SFixed32LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed32LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return SFixed32LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// SFixed32LTValidationError is the validation error returned by
// SFixed32LT.Validate if the designated constraints aren't met.
type SFixed32LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32LTValidationError) ErrorName() string { return "SFixed32LTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32LTValidationError{}

// Validate checks the field values on SFixed32LTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return SFixed32LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// SFixed32LTEValidationError is the validation error returned by
// SFixed32LTE.Validate if the designated constraints aren't met.
type SFixed32LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32LTEValidationError) ErrorName() string { return "SFixed32LTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32LTEValidationError{}

// Validate checks the field values on SFixed32GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed32GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return SFixed32GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// SFixed32GTValidationError is the validation error returned by
// SFixed32GT.Validate if the designated constraints aren't met.
type SFixed32GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32GTValidationError) ErrorName() string { return "SFixed32GTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32GTValidationError{}

// Validate checks the field values on SFixed32GTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return SFixed32GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// SFixed32GTEValidationError is the validation error returned by
// SFixed32GTE.Validate if the designated constraints aren't met.
type SFixed32GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32GTEValidationError) ErrorName() string { return "SFixed32GTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32GTEValidationError{}

// Validate checks the field values on SFixed32GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return SFixed32GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// SFixed32GTLTValidationError is the validation error returned by
// SFixed32GTLT.Validate if the designated constraints aren't met.
type SFixed32GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32GTLTValidationError) ErrorName() string { return "SFixed32GTLTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32GTLTValidationError{}

// Validate checks the field values on SFixed32ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return SFixed32ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// SFixed32ExLTGTValidationError is the validation error returned by
// SFixed32ExLTGT.Validate if the designated constraints aren't met.
type SFixed32ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32ExLTGTValidationError) ErrorName() string { return "SFixed32ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32ExLTGTValidationError{}

// Validate checks the field values on SFixed32GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed32GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return SFixed32GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// SFixed32GTELTEValidationError is the validation error returned by
// SFixed32GTELTE.Validate if the designated constraints aren't met.
type SFixed32GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32GTELTEValidationError) ErrorName() string { return "SFixed32GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32GTELTEValidationError{}

// Validate checks the field values on SFixed32ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SFixed32ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return SFixed32ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// SFixed32ExGTELTEValidationError is the validation error returned by
// SFixed32ExGTELTE.Validate if the designated constraints aren't met.
type SFixed32ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed32ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed32ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed32ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed32ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed32ExGTELTEValidationError) ErrorName() string { return "SFixed32ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed32ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed32ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed32ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed32ExGTELTEValidationError{}

// Validate checks the field values on SFixed64None with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64None) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Val

	return nil
}

// SFixed64NoneValidationError is the validation error returned by
// SFixed64None.Validate if the designated constraints aren't met.
type SFixed64NoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64NoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64NoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64NoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64NoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64NoneValidationError) ErrorName() string { return "SFixed64NoneValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64NoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64None.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64NoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64NoneValidationError{}

// Validate checks the field values on SFixed64Const with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64Const) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() != 1 {
		return SFixed64ConstValidationError{
			field:  "Val",
			reason: "value must equal 1",
		}
	}

	return nil
}

// SFixed64ConstValidationError is the validation error returned by
// SFixed64Const.Validate if the designated constraints aren't met.
type SFixed64ConstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64ConstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64ConstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64ConstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64ConstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64ConstValidationError) ErrorName() string { return "SFixed64ConstValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64ConstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64Const.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64ConstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64ConstValidationError{}

// Validate checks the field values on SFixed64In with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed64In) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SFixed64In_Val_InLookup[m.GetVal()]; !ok {
		return SFixed64InValidationError{
			field:  "Val",
			reason: "value must be in list [2 3]",
		}
	}

	return nil
}

// SFixed64InValidationError is the validation error returned by
// SFixed64In.Validate if the designated constraints aren't met.
type SFixed64InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64InValidationError) ErrorName() string { return "SFixed64InValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64InValidationError{}

var _SFixed64In_Val_InLookup = map[int64]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on SFixed64NotIn with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64NotIn) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _SFixed64NotIn_Val_NotInLookup[m.GetVal()]; ok {
		return SFixed64NotInValidationError{
			field:  "Val",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// SFixed64NotInValidationError is the validation error returned by
// SFixed64NotIn.Validate if the designated constraints aren't met.
type SFixed64NotInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64NotInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64NotInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64NotInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64NotInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64NotInValidationError) ErrorName() string { return "SFixed64NotInValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64NotInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64NotIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64NotInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64NotInValidationError{}

var _SFixed64NotIn_Val_NotInLookup = map[int64]struct{}{
	0: {},
}

// Validate checks the field values on SFixed64LT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed64LT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() >= 0 {
		return SFixed64LTValidationError{
			field:  "Val",
			reason: "value must be less than 0",
		}
	}

	return nil
}

// SFixed64LTValidationError is the validation error returned by
// SFixed64LT.Validate if the designated constraints aren't met.
type SFixed64LTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64LTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64LTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64LTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64LTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64LTValidationError) ErrorName() string { return "SFixed64LTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64LTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64LT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64LTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64LTValidationError{}

// Validate checks the field values on SFixed64LTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64LTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() > 64 {
		return SFixed64LTEValidationError{
			field:  "Val",
			reason: "value must be less than or equal to 64",
		}
	}

	return nil
}

// SFixed64LTEValidationError is the validation error returned by
// SFixed64LTE.Validate if the designated constraints aren't met.
type SFixed64LTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64LTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64LTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64LTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64LTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64LTEValidationError) ErrorName() string { return "SFixed64LTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64LTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64LTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64LTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64LTEValidationError{}

// Validate checks the field values on SFixed64GT with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SFixed64GT) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() <= 16 {
		return SFixed64GTValidationError{
			field:  "Val",
			reason: "value must be greater than 16",
		}
	}

	return nil
}

// SFixed64GTValidationError is the validation error returned by
// SFixed64GT.Validate if the designated constraints aren't met.
type SFixed64GTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64GTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64GTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64GTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64GTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64GTValidationError) ErrorName() string { return "SFixed64GTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64GTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64GT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64GTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64GTValidationError{}

// Validate checks the field values on SFixed64GTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64GTE) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVal() < 8 {
		return SFixed64GTEValidationError{
			field:  "Val",
			reason: "value must be greater than or equal to 8",
		}
	}

	return nil
}

// SFixed64GTEValidationError is the validation error returned by
// SFixed64GTE.Validate if the designated constraints aren't met.
type SFixed64GTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64GTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64GTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64GTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64GTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64GTEValidationError) ErrorName() string { return "SFixed64GTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64GTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64GTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64GTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64GTEValidationError{}

// Validate checks the field values on SFixed64GTLT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64GTLT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val <= 0 || val >= 10 {
		return SFixed64GTLTValidationError{
			field:  "Val",
			reason: "value must be inside range (0, 10)",
		}
	}

	return nil
}

// SFixed64GTLTValidationError is the validation error returned by
// SFixed64GTLT.Validate if the designated constraints aren't met.
type SFixed64GTLTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64GTLTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64GTLTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64GTLTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64GTLTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64GTLTValidationError) ErrorName() string { return "SFixed64GTLTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64GTLTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64GTLT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64GTLTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64GTLTValidationError{}

// Validate checks the field values on SFixed64ExLTGT with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64ExLTGT) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val >= 0 && val <= 10 {
		return SFixed64ExLTGTValidationError{
			field:  "Val",
			reason: "value must be outside range [0, 10]",
		}
	}

	return nil
}

// SFixed64ExLTGTValidationError is the validation error returned by
// SFixed64ExLTGT.Validate if the designated constraints aren't met.
type SFixed64ExLTGTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64ExLTGTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64ExLTGTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64ExLTGTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64ExLTGTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64ExLTGTValidationError) ErrorName() string { return "SFixed64ExLTGTValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64ExLTGTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64ExLTGT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64ExLTGTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64ExLTGTValidationError{}

// Validate checks the field values on SFixed64GTELTE with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SFixed64GTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val < 128 || val > 256 {
		return SFixed64GTELTEValidationError{
			field:  "Val",
			reason: "value must be inside range [128, 256]",
		}
	}

	return nil
}

// SFixed64GTELTEValidationError is the validation error returned by
// SFixed64GTELTE.Validate if the designated constraints aren't met.
type SFixed64GTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64GTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64GTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64GTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64GTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64GTELTEValidationError) ErrorName() string { return "SFixed64GTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64GTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64GTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64GTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64GTELTEValidationError{}

// Validate checks the field values on SFixed64ExGTELTE with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SFixed64ExGTELTE) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetVal(); val > 128 && val < 256 {
		return SFixed64ExGTELTEValidationError{
			field:  "Val",
			reason: "value must be outside range (128, 256)",
		}
	}

	return nil
}

// SFixed64ExGTELTEValidationError is the validation error returned by
// SFixed64ExGTELTE.Validate if the designated constraints aren't met.
type SFixed64ExGTELTEValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SFixed64ExGTELTEValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SFixed64ExGTELTEValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SFixed64ExGTELTEValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SFixed64ExGTELTEValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SFixed64ExGTELTEValidationError) ErrorName() string { return "SFixed64ExGTELTEValidationError" }

// Error satisfies the builtin error interface
func (e SFixed64ExGTELTEValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSFixed64ExGTELTE.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SFixed64ExGTELTEValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SFixed64ExGTELTEValidationError{}
